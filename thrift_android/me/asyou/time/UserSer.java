/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package me.asyou.time;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2015-12-21")
public class UserSer {

  public interface Iface {

    public String Register(String u, String device_id) throws org.apache.thrift.TException;

    public String Login(String logkey, String pwd, String device_id) throws org.apache.thrift.TException;

    public String Logout(String key, String device_id) throws org.apache.thrift.TException;

    public String AppRegister(String u, String device_id, String access_token) throws org.apache.thrift.TException;

    public String AppLogin(String logkey, String pwd, String device_id, String access_token) throws org.apache.thrift.TException;

    public String AccessToken(String appid, String secret) throws org.apache.thrift.TException;

    public String Authorize(String appid, String response_type, String scope, String state) throws org.apache.thrift.TException;

    public String Oauth2Token(String appid, String secret, String code) throws org.apache.thrift.TException;

    public String UserInfo(String token, String appid, String openid) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void Register(String u, String device_id, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void Login(String logkey, String pwd, String device_id, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void Logout(String key, String device_id, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void AppRegister(String u, String device_id, String access_token, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void AppLogin(String logkey, String pwd, String device_id, String access_token, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void AccessToken(String appid, String secret, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void Authorize(String appid, String response_type, String scope, String state, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void Oauth2Token(String appid, String secret, String code, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void UserInfo(String token, String appid, String openid, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public String Register(String u, String device_id) throws org.apache.thrift.TException
    {
      send_Register(u, device_id);
      return recv_Register();
    }

    public void send_Register(String u, String device_id) throws org.apache.thrift.TException
    {
      Register_args args = new Register_args();
      args.setU(u);
      args.setDevice_id(device_id);
      sendBase("Register", args);
    }

    public String recv_Register() throws org.apache.thrift.TException
    {
      Register_result result = new Register_result();
      receiveBase(result, "Register");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "Register failed: unknown result");
    }

    public String Login(String logkey, String pwd, String device_id) throws org.apache.thrift.TException
    {
      send_Login(logkey, pwd, device_id);
      return recv_Login();
    }

    public void send_Login(String logkey, String pwd, String device_id) throws org.apache.thrift.TException
    {
      Login_args args = new Login_args();
      args.setLogkey(logkey);
      args.setPwd(pwd);
      args.setDevice_id(device_id);
      sendBase("Login", args);
    }

    public String recv_Login() throws org.apache.thrift.TException
    {
      Login_result result = new Login_result();
      receiveBase(result, "Login");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "Login failed: unknown result");
    }

    public String Logout(String key, String device_id) throws org.apache.thrift.TException
    {
      send_Logout(key, device_id);
      return recv_Logout();
    }

    public void send_Logout(String key, String device_id) throws org.apache.thrift.TException
    {
      Logout_args args = new Logout_args();
      args.setKey(key);
      args.setDevice_id(device_id);
      sendBase("Logout", args);
    }

    public String recv_Logout() throws org.apache.thrift.TException
    {
      Logout_result result = new Logout_result();
      receiveBase(result, "Logout");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "Logout failed: unknown result");
    }

    public String AppRegister(String u, String device_id, String access_token) throws org.apache.thrift.TException
    {
      send_AppRegister(u, device_id, access_token);
      return recv_AppRegister();
    }

    public void send_AppRegister(String u, String device_id, String access_token) throws org.apache.thrift.TException
    {
      AppRegister_args args = new AppRegister_args();
      args.setU(u);
      args.setDevice_id(device_id);
      args.setAccess_token(access_token);
      sendBase("AppRegister", args);
    }

    public String recv_AppRegister() throws org.apache.thrift.TException
    {
      AppRegister_result result = new AppRegister_result();
      receiveBase(result, "AppRegister");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "AppRegister failed: unknown result");
    }

    public String AppLogin(String logkey, String pwd, String device_id, String access_token) throws org.apache.thrift.TException
    {
      send_AppLogin(logkey, pwd, device_id, access_token);
      return recv_AppLogin();
    }

    public void send_AppLogin(String logkey, String pwd, String device_id, String access_token) throws org.apache.thrift.TException
    {
      AppLogin_args args = new AppLogin_args();
      args.setLogkey(logkey);
      args.setPwd(pwd);
      args.setDevice_id(device_id);
      args.setAccess_token(access_token);
      sendBase("AppLogin", args);
    }

    public String recv_AppLogin() throws org.apache.thrift.TException
    {
      AppLogin_result result = new AppLogin_result();
      receiveBase(result, "AppLogin");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "AppLogin failed: unknown result");
    }

    public String AccessToken(String appid, String secret) throws org.apache.thrift.TException
    {
      send_AccessToken(appid, secret);
      return recv_AccessToken();
    }

    public void send_AccessToken(String appid, String secret) throws org.apache.thrift.TException
    {
      AccessToken_args args = new AccessToken_args();
      args.setAppid(appid);
      args.setSecret(secret);
      sendBase("AccessToken", args);
    }

    public String recv_AccessToken() throws org.apache.thrift.TException
    {
      AccessToken_result result = new AccessToken_result();
      receiveBase(result, "AccessToken");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "AccessToken failed: unknown result");
    }

    public String Authorize(String appid, String response_type, String scope, String state) throws org.apache.thrift.TException
    {
      send_Authorize(appid, response_type, scope, state);
      return recv_Authorize();
    }

    public void send_Authorize(String appid, String response_type, String scope, String state) throws org.apache.thrift.TException
    {
      Authorize_args args = new Authorize_args();
      args.setAppid(appid);
      args.setResponse_type(response_type);
      args.setScope(scope);
      args.setState(state);
      sendBase("Authorize", args);
    }

    public String recv_Authorize() throws org.apache.thrift.TException
    {
      Authorize_result result = new Authorize_result();
      receiveBase(result, "Authorize");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "Authorize failed: unknown result");
    }

    public String Oauth2Token(String appid, String secret, String code) throws org.apache.thrift.TException
    {
      send_Oauth2Token(appid, secret, code);
      return recv_Oauth2Token();
    }

    public void send_Oauth2Token(String appid, String secret, String code) throws org.apache.thrift.TException
    {
      Oauth2Token_args args = new Oauth2Token_args();
      args.setAppid(appid);
      args.setSecret(secret);
      args.setCode(code);
      sendBase("Oauth2Token", args);
    }

    public String recv_Oauth2Token() throws org.apache.thrift.TException
    {
      Oauth2Token_result result = new Oauth2Token_result();
      receiveBase(result, "Oauth2Token");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "Oauth2Token failed: unknown result");
    }

    public String UserInfo(String token, String appid, String openid) throws org.apache.thrift.TException
    {
      send_UserInfo(token, appid, openid);
      return recv_UserInfo();
    }

    public void send_UserInfo(String token, String appid, String openid) throws org.apache.thrift.TException
    {
      UserInfo_args args = new UserInfo_args();
      args.setToken(token);
      args.setAppid(appid);
      args.setOpenid(openid);
      sendBase("UserInfo", args);
    }

    public String recv_UserInfo() throws org.apache.thrift.TException
    {
      UserInfo_result result = new UserInfo_result();
      receiveBase(result, "UserInfo");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "UserInfo failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void Register(String u, String device_id, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      Register_call method_call = new Register_call(u, device_id, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class Register_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String u;
      private String device_id;
      public Register_call(String u, String device_id, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.u = u;
        this.device_id = device_id;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("Register", org.apache.thrift.protocol.TMessageType.CALL, 0));
        Register_args args = new Register_args();
        args.setU(u);
        args.setDevice_id(device_id);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_Register();
      }
    }

    public void Login(String logkey, String pwd, String device_id, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      Login_call method_call = new Login_call(logkey, pwd, device_id, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class Login_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String logkey;
      private String pwd;
      private String device_id;
      public Login_call(String logkey, String pwd, String device_id, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.logkey = logkey;
        this.pwd = pwd;
        this.device_id = device_id;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("Login", org.apache.thrift.protocol.TMessageType.CALL, 0));
        Login_args args = new Login_args();
        args.setLogkey(logkey);
        args.setPwd(pwd);
        args.setDevice_id(device_id);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_Login();
      }
    }

    public void Logout(String key, String device_id, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      Logout_call method_call = new Logout_call(key, device_id, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class Logout_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String key;
      private String device_id;
      public Logout_call(String key, String device_id, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.key = key;
        this.device_id = device_id;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("Logout", org.apache.thrift.protocol.TMessageType.CALL, 0));
        Logout_args args = new Logout_args();
        args.setKey(key);
        args.setDevice_id(device_id);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_Logout();
      }
    }

    public void AppRegister(String u, String device_id, String access_token, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      AppRegister_call method_call = new AppRegister_call(u, device_id, access_token, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class AppRegister_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String u;
      private String device_id;
      private String access_token;
      public AppRegister_call(String u, String device_id, String access_token, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.u = u;
        this.device_id = device_id;
        this.access_token = access_token;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("AppRegister", org.apache.thrift.protocol.TMessageType.CALL, 0));
        AppRegister_args args = new AppRegister_args();
        args.setU(u);
        args.setDevice_id(device_id);
        args.setAccess_token(access_token);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_AppRegister();
      }
    }

    public void AppLogin(String logkey, String pwd, String device_id, String access_token, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      AppLogin_call method_call = new AppLogin_call(logkey, pwd, device_id, access_token, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class AppLogin_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String logkey;
      private String pwd;
      private String device_id;
      private String access_token;
      public AppLogin_call(String logkey, String pwd, String device_id, String access_token, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.logkey = logkey;
        this.pwd = pwd;
        this.device_id = device_id;
        this.access_token = access_token;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("AppLogin", org.apache.thrift.protocol.TMessageType.CALL, 0));
        AppLogin_args args = new AppLogin_args();
        args.setLogkey(logkey);
        args.setPwd(pwd);
        args.setDevice_id(device_id);
        args.setAccess_token(access_token);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_AppLogin();
      }
    }

    public void AccessToken(String appid, String secret, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      AccessToken_call method_call = new AccessToken_call(appid, secret, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class AccessToken_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String appid;
      private String secret;
      public AccessToken_call(String appid, String secret, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.appid = appid;
        this.secret = secret;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("AccessToken", org.apache.thrift.protocol.TMessageType.CALL, 0));
        AccessToken_args args = new AccessToken_args();
        args.setAppid(appid);
        args.setSecret(secret);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_AccessToken();
      }
    }

    public void Authorize(String appid, String response_type, String scope, String state, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      Authorize_call method_call = new Authorize_call(appid, response_type, scope, state, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class Authorize_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String appid;
      private String response_type;
      private String scope;
      private String state;
      public Authorize_call(String appid, String response_type, String scope, String state, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.appid = appid;
        this.response_type = response_type;
        this.scope = scope;
        this.state = state;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("Authorize", org.apache.thrift.protocol.TMessageType.CALL, 0));
        Authorize_args args = new Authorize_args();
        args.setAppid(appid);
        args.setResponse_type(response_type);
        args.setScope(scope);
        args.setState(state);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_Authorize();
      }
    }

    public void Oauth2Token(String appid, String secret, String code, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      Oauth2Token_call method_call = new Oauth2Token_call(appid, secret, code, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class Oauth2Token_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String appid;
      private String secret;
      private String code;
      public Oauth2Token_call(String appid, String secret, String code, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.appid = appid;
        this.secret = secret;
        this.code = code;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("Oauth2Token", org.apache.thrift.protocol.TMessageType.CALL, 0));
        Oauth2Token_args args = new Oauth2Token_args();
        args.setAppid(appid);
        args.setSecret(secret);
        args.setCode(code);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_Oauth2Token();
      }
    }

    public void UserInfo(String token, String appid, String openid, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      UserInfo_call method_call = new UserInfo_call(token, appid, openid, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class UserInfo_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String token;
      private String appid;
      private String openid;
      public UserInfo_call(String token, String appid, String openid, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.token = token;
        this.appid = appid;
        this.openid = openid;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("UserInfo", org.apache.thrift.protocol.TMessageType.CALL, 0));
        UserInfo_args args = new UserInfo_args();
        args.setToken(token);
        args.setAppid(appid);
        args.setOpenid(openid);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_UserInfo();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("Register", new Register());
      processMap.put("Login", new Login());
      processMap.put("Logout", new Logout());
      processMap.put("AppRegister", new AppRegister());
      processMap.put("AppLogin", new AppLogin());
      processMap.put("AccessToken", new AccessToken());
      processMap.put("Authorize", new Authorize());
      processMap.put("Oauth2Token", new Oauth2Token());
      processMap.put("UserInfo", new UserInfo());
      return processMap;
    }

    public static class Register<I extends Iface> extends org.apache.thrift.ProcessFunction<I, Register_args> {
      public Register() {
        super("Register");
      }

      public Register_args getEmptyArgsInstance() {
        return new Register_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public Register_result getResult(I iface, Register_args args) throws org.apache.thrift.TException {
        Register_result result = new Register_result();
        result.success = iface.Register(args.u, args.device_id);
        return result;
      }
    }

    public static class Login<I extends Iface> extends org.apache.thrift.ProcessFunction<I, Login_args> {
      public Login() {
        super("Login");
      }

      public Login_args getEmptyArgsInstance() {
        return new Login_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public Login_result getResult(I iface, Login_args args) throws org.apache.thrift.TException {
        Login_result result = new Login_result();
        result.success = iface.Login(args.logkey, args.pwd, args.device_id);
        return result;
      }
    }

    public static class Logout<I extends Iface> extends org.apache.thrift.ProcessFunction<I, Logout_args> {
      public Logout() {
        super("Logout");
      }

      public Logout_args getEmptyArgsInstance() {
        return new Logout_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public Logout_result getResult(I iface, Logout_args args) throws org.apache.thrift.TException {
        Logout_result result = new Logout_result();
        result.success = iface.Logout(args.key, args.device_id);
        return result;
      }
    }

    public static class AppRegister<I extends Iface> extends org.apache.thrift.ProcessFunction<I, AppRegister_args> {
      public AppRegister() {
        super("AppRegister");
      }

      public AppRegister_args getEmptyArgsInstance() {
        return new AppRegister_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public AppRegister_result getResult(I iface, AppRegister_args args) throws org.apache.thrift.TException {
        AppRegister_result result = new AppRegister_result();
        result.success = iface.AppRegister(args.u, args.device_id, args.access_token);
        return result;
      }
    }

    public static class AppLogin<I extends Iface> extends org.apache.thrift.ProcessFunction<I, AppLogin_args> {
      public AppLogin() {
        super("AppLogin");
      }

      public AppLogin_args getEmptyArgsInstance() {
        return new AppLogin_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public AppLogin_result getResult(I iface, AppLogin_args args) throws org.apache.thrift.TException {
        AppLogin_result result = new AppLogin_result();
        result.success = iface.AppLogin(args.logkey, args.pwd, args.device_id, args.access_token);
        return result;
      }
    }

    public static class AccessToken<I extends Iface> extends org.apache.thrift.ProcessFunction<I, AccessToken_args> {
      public AccessToken() {
        super("AccessToken");
      }

      public AccessToken_args getEmptyArgsInstance() {
        return new AccessToken_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public AccessToken_result getResult(I iface, AccessToken_args args) throws org.apache.thrift.TException {
        AccessToken_result result = new AccessToken_result();
        result.success = iface.AccessToken(args.appid, args.secret);
        return result;
      }
    }

    public static class Authorize<I extends Iface> extends org.apache.thrift.ProcessFunction<I, Authorize_args> {
      public Authorize() {
        super("Authorize");
      }

      public Authorize_args getEmptyArgsInstance() {
        return new Authorize_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public Authorize_result getResult(I iface, Authorize_args args) throws org.apache.thrift.TException {
        Authorize_result result = new Authorize_result();
        result.success = iface.Authorize(args.appid, args.response_type, args.scope, args.state);
        return result;
      }
    }

    public static class Oauth2Token<I extends Iface> extends org.apache.thrift.ProcessFunction<I, Oauth2Token_args> {
      public Oauth2Token() {
        super("Oauth2Token");
      }

      public Oauth2Token_args getEmptyArgsInstance() {
        return new Oauth2Token_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public Oauth2Token_result getResult(I iface, Oauth2Token_args args) throws org.apache.thrift.TException {
        Oauth2Token_result result = new Oauth2Token_result();
        result.success = iface.Oauth2Token(args.appid, args.secret, args.code);
        return result;
      }
    }

    public static class UserInfo<I extends Iface> extends org.apache.thrift.ProcessFunction<I, UserInfo_args> {
      public UserInfo() {
        super("UserInfo");
      }

      public UserInfo_args getEmptyArgsInstance() {
        return new UserInfo_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public UserInfo_result getResult(I iface, UserInfo_args args) throws org.apache.thrift.TException {
        UserInfo_result result = new UserInfo_result();
        result.success = iface.UserInfo(args.token, args.appid, args.openid);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("Register", new Register());
      processMap.put("Login", new Login());
      processMap.put("Logout", new Logout());
      processMap.put("AppRegister", new AppRegister());
      processMap.put("AppLogin", new AppLogin());
      processMap.put("AccessToken", new AccessToken());
      processMap.put("Authorize", new Authorize());
      processMap.put("Oauth2Token", new Oauth2Token());
      processMap.put("UserInfo", new UserInfo());
      return processMap;
    }

    public static class Register<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, Register_args, String> {
      public Register() {
        super("Register");
      }

      public Register_args getEmptyArgsInstance() {
        return new Register_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            Register_result result = new Register_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            Register_result result = new Register_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, Register_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.Register(args.u, args.device_id,resultHandler);
      }
    }

    public static class Login<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, Login_args, String> {
      public Login() {
        super("Login");
      }

      public Login_args getEmptyArgsInstance() {
        return new Login_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            Login_result result = new Login_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            Login_result result = new Login_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, Login_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.Login(args.logkey, args.pwd, args.device_id,resultHandler);
      }
    }

    public static class Logout<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, Logout_args, String> {
      public Logout() {
        super("Logout");
      }

      public Logout_args getEmptyArgsInstance() {
        return new Logout_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            Logout_result result = new Logout_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            Logout_result result = new Logout_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, Logout_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.Logout(args.key, args.device_id,resultHandler);
      }
    }

    public static class AppRegister<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, AppRegister_args, String> {
      public AppRegister() {
        super("AppRegister");
      }

      public AppRegister_args getEmptyArgsInstance() {
        return new AppRegister_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            AppRegister_result result = new AppRegister_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            AppRegister_result result = new AppRegister_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, AppRegister_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.AppRegister(args.u, args.device_id, args.access_token,resultHandler);
      }
    }

    public static class AppLogin<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, AppLogin_args, String> {
      public AppLogin() {
        super("AppLogin");
      }

      public AppLogin_args getEmptyArgsInstance() {
        return new AppLogin_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            AppLogin_result result = new AppLogin_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            AppLogin_result result = new AppLogin_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, AppLogin_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.AppLogin(args.logkey, args.pwd, args.device_id, args.access_token,resultHandler);
      }
    }

    public static class AccessToken<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, AccessToken_args, String> {
      public AccessToken() {
        super("AccessToken");
      }

      public AccessToken_args getEmptyArgsInstance() {
        return new AccessToken_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            AccessToken_result result = new AccessToken_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            AccessToken_result result = new AccessToken_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, AccessToken_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.AccessToken(args.appid, args.secret,resultHandler);
      }
    }

    public static class Authorize<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, Authorize_args, String> {
      public Authorize() {
        super("Authorize");
      }

      public Authorize_args getEmptyArgsInstance() {
        return new Authorize_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            Authorize_result result = new Authorize_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            Authorize_result result = new Authorize_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, Authorize_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.Authorize(args.appid, args.response_type, args.scope, args.state,resultHandler);
      }
    }

    public static class Oauth2Token<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, Oauth2Token_args, String> {
      public Oauth2Token() {
        super("Oauth2Token");
      }

      public Oauth2Token_args getEmptyArgsInstance() {
        return new Oauth2Token_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            Oauth2Token_result result = new Oauth2Token_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            Oauth2Token_result result = new Oauth2Token_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, Oauth2Token_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.Oauth2Token(args.appid, args.secret, args.code,resultHandler);
      }
    }

    public static class UserInfo<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, UserInfo_args, String> {
      public UserInfo() {
        super("UserInfo");
      }

      public UserInfo_args getEmptyArgsInstance() {
        return new UserInfo_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            UserInfo_result result = new UserInfo_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            UserInfo_result result = new UserInfo_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, UserInfo_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.UserInfo(args.token, args.appid, args.openid,resultHandler);
      }
    }

  }

  public static class Register_args implements org.apache.thrift.TBase<Register_args, Register_args._Fields>, java.io.Serializable, Cloneable, Comparable<Register_args>, android.os.Parcelable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Register_args");

    private static final org.apache.thrift.protocol.TField U_FIELD_DESC = new org.apache.thrift.protocol.TField("u", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField DEVICE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("device_id", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new Register_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new Register_argsTupleSchemeFactory());
    }

    public String u; // required
    public String device_id; // required

    @Override
    public void writeToParcel(android.os.Parcel out, int flags) {
      out.writeString(u);
      out.writeString(device_id);
    }

    @Override
    public int describeContents() {
      return 0;
    }

    public Register_args(android.os.Parcel in) {
      this.u= in.readString();
      this.device_id= in.readString();
    }

    public static final android.os.Parcelable.Creator<Register_args> CREATOR = new android.os.Parcelable.Creator<Register_args>() {
      @Override
      public Register_args[] newArray(int size) {
        return new Register_args[size];
      }

      @Override
      public Register_args createFromParcel(android.os.Parcel in) {
        return new Register_args(in);
      }
    };

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      U((short)1, "u"),
      DEVICE_ID((short)2, "device_id");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // U
            return U;
          case 2: // DEVICE_ID
            return DEVICE_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.U, new org.apache.thrift.meta_data.FieldMetaData("u", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.DEVICE_ID, new org.apache.thrift.meta_data.FieldMetaData("device_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Register_args.class, metaDataMap);
    }

    public Register_args() {
    }

    public Register_args(
      String u,
      String device_id)
    {
      this();
      this.u = u;
      this.device_id = device_id;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public Register_args(Register_args other) {
      if (other.isSetU()) {
        this.u = other.u;
      }
      if (other.isSetDevice_id()) {
        this.device_id = other.device_id;
      }
    }

    public Register_args deepCopy() {
      return new Register_args(this);
    }

    @Override
    public void clear() {
      this.u = null;
      this.device_id = null;
    }

    public String getU() {
      return this.u;
    }

    public Register_args setU(String u) {
      this.u = u;
      return this;
    }

    public void unsetU() {
      this.u = null;
    }

    /** Returns true if field u is set (has been assigned a value) and false otherwise */
    public boolean isSetU() {
      return this.u != null;
    }

    public void setUIsSet(boolean value) {
      if (!value) {
        this.u = null;
      }
    }

    public String getDevice_id() {
      return this.device_id;
    }

    public Register_args setDevice_id(String device_id) {
      this.device_id = device_id;
      return this;
    }

    public void unsetDevice_id() {
      this.device_id = null;
    }

    /** Returns true if field device_id is set (has been assigned a value) and false otherwise */
    public boolean isSetDevice_id() {
      return this.device_id != null;
    }

    public void setDevice_idIsSet(boolean value) {
      if (!value) {
        this.device_id = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case U:
        if (value == null) {
          unsetU();
        } else {
          setU((String)value);
        }
        break;

      case DEVICE_ID:
        if (value == null) {
          unsetDevice_id();
        } else {
          setDevice_id((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case U:
        return getU();

      case DEVICE_ID:
        return getDevice_id();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case U:
        return isSetU();
      case DEVICE_ID:
        return isSetDevice_id();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof Register_args)
        return this.equals((Register_args)that);
      return false;
    }

    public boolean equals(Register_args that) {
      if (that == null)
        return false;

      boolean this_present_u = true && this.isSetU();
      boolean that_present_u = true && that.isSetU();
      if (this_present_u || that_present_u) {
        if (!(this_present_u && that_present_u))
          return false;
        if (!this.u.equals(that.u))
          return false;
      }

      boolean this_present_device_id = true && this.isSetDevice_id();
      boolean that_present_device_id = true && that.isSetDevice_id();
      if (this_present_device_id || that_present_device_id) {
        if (!(this_present_device_id && that_present_device_id))
          return false;
        if (!this.device_id.equals(that.device_id))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_u = true && (isSetU());
      list.add(present_u);
      if (present_u)
        list.add(u);

      boolean present_device_id = true && (isSetDevice_id());
      list.add(present_device_id);
      if (present_device_id)
        list.add(device_id);

      return list.hashCode();
    }

    @Override
    public int compareTo(Register_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetU()).compareTo(other.isSetU());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetU()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.u, other.u);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDevice_id()).compareTo(other.isSetDevice_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDevice_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.device_id, other.device_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("Register_args(");
      boolean first = true;

      sb.append("u:");
      if (this.u == null) {
        sb.append("null");
      } else {
        sb.append(this.u);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("device_id:");
      if (this.device_id == null) {
        sb.append("null");
      } else {
        sb.append(this.device_id);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class Register_argsStandardSchemeFactory implements SchemeFactory {
      public Register_argsStandardScheme getScheme() {
        return new Register_argsStandardScheme();
      }
    }

    private static class Register_argsStandardScheme extends StandardScheme<Register_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, Register_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // U
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.u = iprot.readString();
                struct.setUIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // DEVICE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.device_id = iprot.readString();
                struct.setDevice_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, Register_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.u != null) {
          oprot.writeFieldBegin(U_FIELD_DESC);
          oprot.writeString(struct.u);
          oprot.writeFieldEnd();
        }
        if (struct.device_id != null) {
          oprot.writeFieldBegin(DEVICE_ID_FIELD_DESC);
          oprot.writeString(struct.device_id);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class Register_argsTupleSchemeFactory implements SchemeFactory {
      public Register_argsTupleScheme getScheme() {
        return new Register_argsTupleScheme();
      }
    }

    private static class Register_argsTupleScheme extends TupleScheme<Register_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, Register_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetU()) {
          optionals.set(0);
        }
        if (struct.isSetDevice_id()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetU()) {
          oprot.writeString(struct.u);
        }
        if (struct.isSetDevice_id()) {
          oprot.writeString(struct.device_id);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, Register_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.u = iprot.readString();
          struct.setUIsSet(true);
        }
        if (incoming.get(1)) {
          struct.device_id = iprot.readString();
          struct.setDevice_idIsSet(true);
        }
      }
    }

  }

  public static class Register_result implements org.apache.thrift.TBase<Register_result, Register_result._Fields>, java.io.Serializable, Cloneable, Comparable<Register_result>, android.os.Parcelable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Register_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new Register_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new Register_resultTupleSchemeFactory());
    }

    public String success; // required

    @Override
    public void writeToParcel(android.os.Parcel out, int flags) {
      out.writeString(success);
    }

    @Override
    public int describeContents() {
      return 0;
    }

    public Register_result(android.os.Parcel in) {
      this.success= in.readString();
    }

    public static final android.os.Parcelable.Creator<Register_result> CREATOR = new android.os.Parcelable.Creator<Register_result>() {
      @Override
      public Register_result[] newArray(int size) {
        return new Register_result[size];
      }

      @Override
      public Register_result createFromParcel(android.os.Parcel in) {
        return new Register_result(in);
      }
    };

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Register_result.class, metaDataMap);
    }

    public Register_result() {
    }

    public Register_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public Register_result(Register_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public Register_result deepCopy() {
      return new Register_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public Register_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof Register_result)
        return this.equals((Register_result)that);
      return false;
    }

    public boolean equals(Register_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(Register_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("Register_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class Register_resultStandardSchemeFactory implements SchemeFactory {
      public Register_resultStandardScheme getScheme() {
        return new Register_resultStandardScheme();
      }
    }

    private static class Register_resultStandardScheme extends StandardScheme<Register_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, Register_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, Register_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class Register_resultTupleSchemeFactory implements SchemeFactory {
      public Register_resultTupleScheme getScheme() {
        return new Register_resultTupleScheme();
      }
    }

    private static class Register_resultTupleScheme extends TupleScheme<Register_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, Register_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, Register_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class Login_args implements org.apache.thrift.TBase<Login_args, Login_args._Fields>, java.io.Serializable, Cloneable, Comparable<Login_args>, android.os.Parcelable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Login_args");

    private static final org.apache.thrift.protocol.TField LOGKEY_FIELD_DESC = new org.apache.thrift.protocol.TField("logkey", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField PWD_FIELD_DESC = new org.apache.thrift.protocol.TField("pwd", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField DEVICE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("device_id", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new Login_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new Login_argsTupleSchemeFactory());
    }

    public String logkey; // required
    public String pwd; // required
    public String device_id; // required

    @Override
    public void writeToParcel(android.os.Parcel out, int flags) {
      out.writeString(logkey);
      out.writeString(pwd);
      out.writeString(device_id);
    }

    @Override
    public int describeContents() {
      return 0;
    }

    public Login_args(android.os.Parcel in) {
      this.logkey= in.readString();
      this.pwd= in.readString();
      this.device_id= in.readString();
    }

    public static final android.os.Parcelable.Creator<Login_args> CREATOR = new android.os.Parcelable.Creator<Login_args>() {
      @Override
      public Login_args[] newArray(int size) {
        return new Login_args[size];
      }

      @Override
      public Login_args createFromParcel(android.os.Parcel in) {
        return new Login_args(in);
      }
    };

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      LOGKEY((short)1, "logkey"),
      PWD((short)2, "pwd"),
      DEVICE_ID((short)3, "device_id");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // LOGKEY
            return LOGKEY;
          case 2: // PWD
            return PWD;
          case 3: // DEVICE_ID
            return DEVICE_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.LOGKEY, new org.apache.thrift.meta_data.FieldMetaData("logkey", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PWD, new org.apache.thrift.meta_data.FieldMetaData("pwd", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.DEVICE_ID, new org.apache.thrift.meta_data.FieldMetaData("device_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Login_args.class, metaDataMap);
    }

    public Login_args() {
    }

    public Login_args(
      String logkey,
      String pwd,
      String device_id)
    {
      this();
      this.logkey = logkey;
      this.pwd = pwd;
      this.device_id = device_id;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public Login_args(Login_args other) {
      if (other.isSetLogkey()) {
        this.logkey = other.logkey;
      }
      if (other.isSetPwd()) {
        this.pwd = other.pwd;
      }
      if (other.isSetDevice_id()) {
        this.device_id = other.device_id;
      }
    }

    public Login_args deepCopy() {
      return new Login_args(this);
    }

    @Override
    public void clear() {
      this.logkey = null;
      this.pwd = null;
      this.device_id = null;
    }

    public String getLogkey() {
      return this.logkey;
    }

    public Login_args setLogkey(String logkey) {
      this.logkey = logkey;
      return this;
    }

    public void unsetLogkey() {
      this.logkey = null;
    }

    /** Returns true if field logkey is set (has been assigned a value) and false otherwise */
    public boolean isSetLogkey() {
      return this.logkey != null;
    }

    public void setLogkeyIsSet(boolean value) {
      if (!value) {
        this.logkey = null;
      }
    }

    public String getPwd() {
      return this.pwd;
    }

    public Login_args setPwd(String pwd) {
      this.pwd = pwd;
      return this;
    }

    public void unsetPwd() {
      this.pwd = null;
    }

    /** Returns true if field pwd is set (has been assigned a value) and false otherwise */
    public boolean isSetPwd() {
      return this.pwd != null;
    }

    public void setPwdIsSet(boolean value) {
      if (!value) {
        this.pwd = null;
      }
    }

    public String getDevice_id() {
      return this.device_id;
    }

    public Login_args setDevice_id(String device_id) {
      this.device_id = device_id;
      return this;
    }

    public void unsetDevice_id() {
      this.device_id = null;
    }

    /** Returns true if field device_id is set (has been assigned a value) and false otherwise */
    public boolean isSetDevice_id() {
      return this.device_id != null;
    }

    public void setDevice_idIsSet(boolean value) {
      if (!value) {
        this.device_id = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case LOGKEY:
        if (value == null) {
          unsetLogkey();
        } else {
          setLogkey((String)value);
        }
        break;

      case PWD:
        if (value == null) {
          unsetPwd();
        } else {
          setPwd((String)value);
        }
        break;

      case DEVICE_ID:
        if (value == null) {
          unsetDevice_id();
        } else {
          setDevice_id((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case LOGKEY:
        return getLogkey();

      case PWD:
        return getPwd();

      case DEVICE_ID:
        return getDevice_id();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case LOGKEY:
        return isSetLogkey();
      case PWD:
        return isSetPwd();
      case DEVICE_ID:
        return isSetDevice_id();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof Login_args)
        return this.equals((Login_args)that);
      return false;
    }

    public boolean equals(Login_args that) {
      if (that == null)
        return false;

      boolean this_present_logkey = true && this.isSetLogkey();
      boolean that_present_logkey = true && that.isSetLogkey();
      if (this_present_logkey || that_present_logkey) {
        if (!(this_present_logkey && that_present_logkey))
          return false;
        if (!this.logkey.equals(that.logkey))
          return false;
      }

      boolean this_present_pwd = true && this.isSetPwd();
      boolean that_present_pwd = true && that.isSetPwd();
      if (this_present_pwd || that_present_pwd) {
        if (!(this_present_pwd && that_present_pwd))
          return false;
        if (!this.pwd.equals(that.pwd))
          return false;
      }

      boolean this_present_device_id = true && this.isSetDevice_id();
      boolean that_present_device_id = true && that.isSetDevice_id();
      if (this_present_device_id || that_present_device_id) {
        if (!(this_present_device_id && that_present_device_id))
          return false;
        if (!this.device_id.equals(that.device_id))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_logkey = true && (isSetLogkey());
      list.add(present_logkey);
      if (present_logkey)
        list.add(logkey);

      boolean present_pwd = true && (isSetPwd());
      list.add(present_pwd);
      if (present_pwd)
        list.add(pwd);

      boolean present_device_id = true && (isSetDevice_id());
      list.add(present_device_id);
      if (present_device_id)
        list.add(device_id);

      return list.hashCode();
    }

    @Override
    public int compareTo(Login_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetLogkey()).compareTo(other.isSetLogkey());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLogkey()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.logkey, other.logkey);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPwd()).compareTo(other.isSetPwd());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPwd()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pwd, other.pwd);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDevice_id()).compareTo(other.isSetDevice_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDevice_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.device_id, other.device_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("Login_args(");
      boolean first = true;

      sb.append("logkey:");
      if (this.logkey == null) {
        sb.append("null");
      } else {
        sb.append(this.logkey);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("pwd:");
      if (this.pwd == null) {
        sb.append("null");
      } else {
        sb.append(this.pwd);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("device_id:");
      if (this.device_id == null) {
        sb.append("null");
      } else {
        sb.append(this.device_id);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class Login_argsStandardSchemeFactory implements SchemeFactory {
      public Login_argsStandardScheme getScheme() {
        return new Login_argsStandardScheme();
      }
    }

    private static class Login_argsStandardScheme extends StandardScheme<Login_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, Login_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // LOGKEY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.logkey = iprot.readString();
                struct.setLogkeyIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PWD
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.pwd = iprot.readString();
                struct.setPwdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // DEVICE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.device_id = iprot.readString();
                struct.setDevice_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, Login_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.logkey != null) {
          oprot.writeFieldBegin(LOGKEY_FIELD_DESC);
          oprot.writeString(struct.logkey);
          oprot.writeFieldEnd();
        }
        if (struct.pwd != null) {
          oprot.writeFieldBegin(PWD_FIELD_DESC);
          oprot.writeString(struct.pwd);
          oprot.writeFieldEnd();
        }
        if (struct.device_id != null) {
          oprot.writeFieldBegin(DEVICE_ID_FIELD_DESC);
          oprot.writeString(struct.device_id);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class Login_argsTupleSchemeFactory implements SchemeFactory {
      public Login_argsTupleScheme getScheme() {
        return new Login_argsTupleScheme();
      }
    }

    private static class Login_argsTupleScheme extends TupleScheme<Login_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, Login_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetLogkey()) {
          optionals.set(0);
        }
        if (struct.isSetPwd()) {
          optionals.set(1);
        }
        if (struct.isSetDevice_id()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetLogkey()) {
          oprot.writeString(struct.logkey);
        }
        if (struct.isSetPwd()) {
          oprot.writeString(struct.pwd);
        }
        if (struct.isSetDevice_id()) {
          oprot.writeString(struct.device_id);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, Login_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.logkey = iprot.readString();
          struct.setLogkeyIsSet(true);
        }
        if (incoming.get(1)) {
          struct.pwd = iprot.readString();
          struct.setPwdIsSet(true);
        }
        if (incoming.get(2)) {
          struct.device_id = iprot.readString();
          struct.setDevice_idIsSet(true);
        }
      }
    }

  }

  public static class Login_result implements org.apache.thrift.TBase<Login_result, Login_result._Fields>, java.io.Serializable, Cloneable, Comparable<Login_result>, android.os.Parcelable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Login_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new Login_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new Login_resultTupleSchemeFactory());
    }

    public String success; // required

    @Override
    public void writeToParcel(android.os.Parcel out, int flags) {
      out.writeString(success);
    }

    @Override
    public int describeContents() {
      return 0;
    }

    public Login_result(android.os.Parcel in) {
      this.success= in.readString();
    }

    public static final android.os.Parcelable.Creator<Login_result> CREATOR = new android.os.Parcelable.Creator<Login_result>() {
      @Override
      public Login_result[] newArray(int size) {
        return new Login_result[size];
      }

      @Override
      public Login_result createFromParcel(android.os.Parcel in) {
        return new Login_result(in);
      }
    };

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Login_result.class, metaDataMap);
    }

    public Login_result() {
    }

    public Login_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public Login_result(Login_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public Login_result deepCopy() {
      return new Login_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public Login_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof Login_result)
        return this.equals((Login_result)that);
      return false;
    }

    public boolean equals(Login_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(Login_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("Login_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class Login_resultStandardSchemeFactory implements SchemeFactory {
      public Login_resultStandardScheme getScheme() {
        return new Login_resultStandardScheme();
      }
    }

    private static class Login_resultStandardScheme extends StandardScheme<Login_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, Login_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, Login_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class Login_resultTupleSchemeFactory implements SchemeFactory {
      public Login_resultTupleScheme getScheme() {
        return new Login_resultTupleScheme();
      }
    }

    private static class Login_resultTupleScheme extends TupleScheme<Login_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, Login_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, Login_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class Logout_args implements org.apache.thrift.TBase<Logout_args, Logout_args._Fields>, java.io.Serializable, Cloneable, Comparable<Logout_args>, android.os.Parcelable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Logout_args");

    private static final org.apache.thrift.protocol.TField KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("key", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField DEVICE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("device_id", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new Logout_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new Logout_argsTupleSchemeFactory());
    }

    public String key; // required
    public String device_id; // required

    @Override
    public void writeToParcel(android.os.Parcel out, int flags) {
      out.writeString(key);
      out.writeString(device_id);
    }

    @Override
    public int describeContents() {
      return 0;
    }

    public Logout_args(android.os.Parcel in) {
      this.key= in.readString();
      this.device_id= in.readString();
    }

    public static final android.os.Parcelable.Creator<Logout_args> CREATOR = new android.os.Parcelable.Creator<Logout_args>() {
      @Override
      public Logout_args[] newArray(int size) {
        return new Logout_args[size];
      }

      @Override
      public Logout_args createFromParcel(android.os.Parcel in) {
        return new Logout_args(in);
      }
    };

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      KEY((short)1, "key"),
      DEVICE_ID((short)2, "device_id");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // KEY
            return KEY;
          case 2: // DEVICE_ID
            return DEVICE_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.KEY, new org.apache.thrift.meta_data.FieldMetaData("key", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.DEVICE_ID, new org.apache.thrift.meta_data.FieldMetaData("device_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Logout_args.class, metaDataMap);
    }

    public Logout_args() {
    }

    public Logout_args(
      String key,
      String device_id)
    {
      this();
      this.key = key;
      this.device_id = device_id;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public Logout_args(Logout_args other) {
      if (other.isSetKey()) {
        this.key = other.key;
      }
      if (other.isSetDevice_id()) {
        this.device_id = other.device_id;
      }
    }

    public Logout_args deepCopy() {
      return new Logout_args(this);
    }

    @Override
    public void clear() {
      this.key = null;
      this.device_id = null;
    }

    public String getKey() {
      return this.key;
    }

    public Logout_args setKey(String key) {
      this.key = key;
      return this;
    }

    public void unsetKey() {
      this.key = null;
    }

    /** Returns true if field key is set (has been assigned a value) and false otherwise */
    public boolean isSetKey() {
      return this.key != null;
    }

    public void setKeyIsSet(boolean value) {
      if (!value) {
        this.key = null;
      }
    }

    public String getDevice_id() {
      return this.device_id;
    }

    public Logout_args setDevice_id(String device_id) {
      this.device_id = device_id;
      return this;
    }

    public void unsetDevice_id() {
      this.device_id = null;
    }

    /** Returns true if field device_id is set (has been assigned a value) and false otherwise */
    public boolean isSetDevice_id() {
      return this.device_id != null;
    }

    public void setDevice_idIsSet(boolean value) {
      if (!value) {
        this.device_id = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case KEY:
        if (value == null) {
          unsetKey();
        } else {
          setKey((String)value);
        }
        break;

      case DEVICE_ID:
        if (value == null) {
          unsetDevice_id();
        } else {
          setDevice_id((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case KEY:
        return getKey();

      case DEVICE_ID:
        return getDevice_id();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case KEY:
        return isSetKey();
      case DEVICE_ID:
        return isSetDevice_id();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof Logout_args)
        return this.equals((Logout_args)that);
      return false;
    }

    public boolean equals(Logout_args that) {
      if (that == null)
        return false;

      boolean this_present_key = true && this.isSetKey();
      boolean that_present_key = true && that.isSetKey();
      if (this_present_key || that_present_key) {
        if (!(this_present_key && that_present_key))
          return false;
        if (!this.key.equals(that.key))
          return false;
      }

      boolean this_present_device_id = true && this.isSetDevice_id();
      boolean that_present_device_id = true && that.isSetDevice_id();
      if (this_present_device_id || that_present_device_id) {
        if (!(this_present_device_id && that_present_device_id))
          return false;
        if (!this.device_id.equals(that.device_id))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_key = true && (isSetKey());
      list.add(present_key);
      if (present_key)
        list.add(key);

      boolean present_device_id = true && (isSetDevice_id());
      list.add(present_device_id);
      if (present_device_id)
        list.add(device_id);

      return list.hashCode();
    }

    @Override
    public int compareTo(Logout_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetKey()).compareTo(other.isSetKey());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetKey()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.key, other.key);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDevice_id()).compareTo(other.isSetDevice_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDevice_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.device_id, other.device_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("Logout_args(");
      boolean first = true;

      sb.append("key:");
      if (this.key == null) {
        sb.append("null");
      } else {
        sb.append(this.key);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("device_id:");
      if (this.device_id == null) {
        sb.append("null");
      } else {
        sb.append(this.device_id);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class Logout_argsStandardSchemeFactory implements SchemeFactory {
      public Logout_argsStandardScheme getScheme() {
        return new Logout_argsStandardScheme();
      }
    }

    private static class Logout_argsStandardScheme extends StandardScheme<Logout_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, Logout_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // KEY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.key = iprot.readString();
                struct.setKeyIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // DEVICE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.device_id = iprot.readString();
                struct.setDevice_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, Logout_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.key != null) {
          oprot.writeFieldBegin(KEY_FIELD_DESC);
          oprot.writeString(struct.key);
          oprot.writeFieldEnd();
        }
        if (struct.device_id != null) {
          oprot.writeFieldBegin(DEVICE_ID_FIELD_DESC);
          oprot.writeString(struct.device_id);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class Logout_argsTupleSchemeFactory implements SchemeFactory {
      public Logout_argsTupleScheme getScheme() {
        return new Logout_argsTupleScheme();
      }
    }

    private static class Logout_argsTupleScheme extends TupleScheme<Logout_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, Logout_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetKey()) {
          optionals.set(0);
        }
        if (struct.isSetDevice_id()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetKey()) {
          oprot.writeString(struct.key);
        }
        if (struct.isSetDevice_id()) {
          oprot.writeString(struct.device_id);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, Logout_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.key = iprot.readString();
          struct.setKeyIsSet(true);
        }
        if (incoming.get(1)) {
          struct.device_id = iprot.readString();
          struct.setDevice_idIsSet(true);
        }
      }
    }

  }

  public static class Logout_result implements org.apache.thrift.TBase<Logout_result, Logout_result._Fields>, java.io.Serializable, Cloneable, Comparable<Logout_result>, android.os.Parcelable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Logout_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new Logout_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new Logout_resultTupleSchemeFactory());
    }

    public String success; // required

    @Override
    public void writeToParcel(android.os.Parcel out, int flags) {
      out.writeString(success);
    }

    @Override
    public int describeContents() {
      return 0;
    }

    public Logout_result(android.os.Parcel in) {
      this.success= in.readString();
    }

    public static final android.os.Parcelable.Creator<Logout_result> CREATOR = new android.os.Parcelable.Creator<Logout_result>() {
      @Override
      public Logout_result[] newArray(int size) {
        return new Logout_result[size];
      }

      @Override
      public Logout_result createFromParcel(android.os.Parcel in) {
        return new Logout_result(in);
      }
    };

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Logout_result.class, metaDataMap);
    }

    public Logout_result() {
    }

    public Logout_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public Logout_result(Logout_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public Logout_result deepCopy() {
      return new Logout_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public Logout_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof Logout_result)
        return this.equals((Logout_result)that);
      return false;
    }

    public boolean equals(Logout_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(Logout_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("Logout_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class Logout_resultStandardSchemeFactory implements SchemeFactory {
      public Logout_resultStandardScheme getScheme() {
        return new Logout_resultStandardScheme();
      }
    }

    private static class Logout_resultStandardScheme extends StandardScheme<Logout_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, Logout_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, Logout_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class Logout_resultTupleSchemeFactory implements SchemeFactory {
      public Logout_resultTupleScheme getScheme() {
        return new Logout_resultTupleScheme();
      }
    }

    private static class Logout_resultTupleScheme extends TupleScheme<Logout_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, Logout_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, Logout_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class AppRegister_args implements org.apache.thrift.TBase<AppRegister_args, AppRegister_args._Fields>, java.io.Serializable, Cloneable, Comparable<AppRegister_args>, android.os.Parcelable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("AppRegister_args");

    private static final org.apache.thrift.protocol.TField U_FIELD_DESC = new org.apache.thrift.protocol.TField("u", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField DEVICE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("device_id", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField ACCESS_TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("access_token", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new AppRegister_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new AppRegister_argsTupleSchemeFactory());
    }

    public String u; // required
    public String device_id; // required
    public String access_token; // required

    @Override
    public void writeToParcel(android.os.Parcel out, int flags) {
      out.writeString(u);
      out.writeString(device_id);
      out.writeString(access_token);
    }

    @Override
    public int describeContents() {
      return 0;
    }

    public AppRegister_args(android.os.Parcel in) {
      this.u= in.readString();
      this.device_id= in.readString();
      this.access_token= in.readString();
    }

    public static final android.os.Parcelable.Creator<AppRegister_args> CREATOR = new android.os.Parcelable.Creator<AppRegister_args>() {
      @Override
      public AppRegister_args[] newArray(int size) {
        return new AppRegister_args[size];
      }

      @Override
      public AppRegister_args createFromParcel(android.os.Parcel in) {
        return new AppRegister_args(in);
      }
    };

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      U((short)1, "u"),
      DEVICE_ID((short)2, "device_id"),
      ACCESS_TOKEN((short)3, "access_token");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // U
            return U;
          case 2: // DEVICE_ID
            return DEVICE_ID;
          case 3: // ACCESS_TOKEN
            return ACCESS_TOKEN;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.U, new org.apache.thrift.meta_data.FieldMetaData("u", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.DEVICE_ID, new org.apache.thrift.meta_data.FieldMetaData("device_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ACCESS_TOKEN, new org.apache.thrift.meta_data.FieldMetaData("access_token", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(AppRegister_args.class, metaDataMap);
    }

    public AppRegister_args() {
    }

    public AppRegister_args(
      String u,
      String device_id,
      String access_token)
    {
      this();
      this.u = u;
      this.device_id = device_id;
      this.access_token = access_token;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public AppRegister_args(AppRegister_args other) {
      if (other.isSetU()) {
        this.u = other.u;
      }
      if (other.isSetDevice_id()) {
        this.device_id = other.device_id;
      }
      if (other.isSetAccess_token()) {
        this.access_token = other.access_token;
      }
    }

    public AppRegister_args deepCopy() {
      return new AppRegister_args(this);
    }

    @Override
    public void clear() {
      this.u = null;
      this.device_id = null;
      this.access_token = null;
    }

    public String getU() {
      return this.u;
    }

    public AppRegister_args setU(String u) {
      this.u = u;
      return this;
    }

    public void unsetU() {
      this.u = null;
    }

    /** Returns true if field u is set (has been assigned a value) and false otherwise */
    public boolean isSetU() {
      return this.u != null;
    }

    public void setUIsSet(boolean value) {
      if (!value) {
        this.u = null;
      }
    }

    public String getDevice_id() {
      return this.device_id;
    }

    public AppRegister_args setDevice_id(String device_id) {
      this.device_id = device_id;
      return this;
    }

    public void unsetDevice_id() {
      this.device_id = null;
    }

    /** Returns true if field device_id is set (has been assigned a value) and false otherwise */
    public boolean isSetDevice_id() {
      return this.device_id != null;
    }

    public void setDevice_idIsSet(boolean value) {
      if (!value) {
        this.device_id = null;
      }
    }

    public String getAccess_token() {
      return this.access_token;
    }

    public AppRegister_args setAccess_token(String access_token) {
      this.access_token = access_token;
      return this;
    }

    public void unsetAccess_token() {
      this.access_token = null;
    }

    /** Returns true if field access_token is set (has been assigned a value) and false otherwise */
    public boolean isSetAccess_token() {
      return this.access_token != null;
    }

    public void setAccess_tokenIsSet(boolean value) {
      if (!value) {
        this.access_token = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case U:
        if (value == null) {
          unsetU();
        } else {
          setU((String)value);
        }
        break;

      case DEVICE_ID:
        if (value == null) {
          unsetDevice_id();
        } else {
          setDevice_id((String)value);
        }
        break;

      case ACCESS_TOKEN:
        if (value == null) {
          unsetAccess_token();
        } else {
          setAccess_token((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case U:
        return getU();

      case DEVICE_ID:
        return getDevice_id();

      case ACCESS_TOKEN:
        return getAccess_token();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case U:
        return isSetU();
      case DEVICE_ID:
        return isSetDevice_id();
      case ACCESS_TOKEN:
        return isSetAccess_token();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof AppRegister_args)
        return this.equals((AppRegister_args)that);
      return false;
    }

    public boolean equals(AppRegister_args that) {
      if (that == null)
        return false;

      boolean this_present_u = true && this.isSetU();
      boolean that_present_u = true && that.isSetU();
      if (this_present_u || that_present_u) {
        if (!(this_present_u && that_present_u))
          return false;
        if (!this.u.equals(that.u))
          return false;
      }

      boolean this_present_device_id = true && this.isSetDevice_id();
      boolean that_present_device_id = true && that.isSetDevice_id();
      if (this_present_device_id || that_present_device_id) {
        if (!(this_present_device_id && that_present_device_id))
          return false;
        if (!this.device_id.equals(that.device_id))
          return false;
      }

      boolean this_present_access_token = true && this.isSetAccess_token();
      boolean that_present_access_token = true && that.isSetAccess_token();
      if (this_present_access_token || that_present_access_token) {
        if (!(this_present_access_token && that_present_access_token))
          return false;
        if (!this.access_token.equals(that.access_token))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_u = true && (isSetU());
      list.add(present_u);
      if (present_u)
        list.add(u);

      boolean present_device_id = true && (isSetDevice_id());
      list.add(present_device_id);
      if (present_device_id)
        list.add(device_id);

      boolean present_access_token = true && (isSetAccess_token());
      list.add(present_access_token);
      if (present_access_token)
        list.add(access_token);

      return list.hashCode();
    }

    @Override
    public int compareTo(AppRegister_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetU()).compareTo(other.isSetU());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetU()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.u, other.u);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDevice_id()).compareTo(other.isSetDevice_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDevice_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.device_id, other.device_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAccess_token()).compareTo(other.isSetAccess_token());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAccess_token()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.access_token, other.access_token);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("AppRegister_args(");
      boolean first = true;

      sb.append("u:");
      if (this.u == null) {
        sb.append("null");
      } else {
        sb.append(this.u);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("device_id:");
      if (this.device_id == null) {
        sb.append("null");
      } else {
        sb.append(this.device_id);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("access_token:");
      if (this.access_token == null) {
        sb.append("null");
      } else {
        sb.append(this.access_token);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class AppRegister_argsStandardSchemeFactory implements SchemeFactory {
      public AppRegister_argsStandardScheme getScheme() {
        return new AppRegister_argsStandardScheme();
      }
    }

    private static class AppRegister_argsStandardScheme extends StandardScheme<AppRegister_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, AppRegister_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // U
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.u = iprot.readString();
                struct.setUIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // DEVICE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.device_id = iprot.readString();
                struct.setDevice_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // ACCESS_TOKEN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.access_token = iprot.readString();
                struct.setAccess_tokenIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, AppRegister_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.u != null) {
          oprot.writeFieldBegin(U_FIELD_DESC);
          oprot.writeString(struct.u);
          oprot.writeFieldEnd();
        }
        if (struct.device_id != null) {
          oprot.writeFieldBegin(DEVICE_ID_FIELD_DESC);
          oprot.writeString(struct.device_id);
          oprot.writeFieldEnd();
        }
        if (struct.access_token != null) {
          oprot.writeFieldBegin(ACCESS_TOKEN_FIELD_DESC);
          oprot.writeString(struct.access_token);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class AppRegister_argsTupleSchemeFactory implements SchemeFactory {
      public AppRegister_argsTupleScheme getScheme() {
        return new AppRegister_argsTupleScheme();
      }
    }

    private static class AppRegister_argsTupleScheme extends TupleScheme<AppRegister_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, AppRegister_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetU()) {
          optionals.set(0);
        }
        if (struct.isSetDevice_id()) {
          optionals.set(1);
        }
        if (struct.isSetAccess_token()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetU()) {
          oprot.writeString(struct.u);
        }
        if (struct.isSetDevice_id()) {
          oprot.writeString(struct.device_id);
        }
        if (struct.isSetAccess_token()) {
          oprot.writeString(struct.access_token);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, AppRegister_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.u = iprot.readString();
          struct.setUIsSet(true);
        }
        if (incoming.get(1)) {
          struct.device_id = iprot.readString();
          struct.setDevice_idIsSet(true);
        }
        if (incoming.get(2)) {
          struct.access_token = iprot.readString();
          struct.setAccess_tokenIsSet(true);
        }
      }
    }

  }

  public static class AppRegister_result implements org.apache.thrift.TBase<AppRegister_result, AppRegister_result._Fields>, java.io.Serializable, Cloneable, Comparable<AppRegister_result>, android.os.Parcelable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("AppRegister_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new AppRegister_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new AppRegister_resultTupleSchemeFactory());
    }

    public String success; // required

    @Override
    public void writeToParcel(android.os.Parcel out, int flags) {
      out.writeString(success);
    }

    @Override
    public int describeContents() {
      return 0;
    }

    public AppRegister_result(android.os.Parcel in) {
      this.success= in.readString();
    }

    public static final android.os.Parcelable.Creator<AppRegister_result> CREATOR = new android.os.Parcelable.Creator<AppRegister_result>() {
      @Override
      public AppRegister_result[] newArray(int size) {
        return new AppRegister_result[size];
      }

      @Override
      public AppRegister_result createFromParcel(android.os.Parcel in) {
        return new AppRegister_result(in);
      }
    };

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(AppRegister_result.class, metaDataMap);
    }

    public AppRegister_result() {
    }

    public AppRegister_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public AppRegister_result(AppRegister_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public AppRegister_result deepCopy() {
      return new AppRegister_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public AppRegister_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof AppRegister_result)
        return this.equals((AppRegister_result)that);
      return false;
    }

    public boolean equals(AppRegister_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(AppRegister_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("AppRegister_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class AppRegister_resultStandardSchemeFactory implements SchemeFactory {
      public AppRegister_resultStandardScheme getScheme() {
        return new AppRegister_resultStandardScheme();
      }
    }

    private static class AppRegister_resultStandardScheme extends StandardScheme<AppRegister_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, AppRegister_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, AppRegister_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class AppRegister_resultTupleSchemeFactory implements SchemeFactory {
      public AppRegister_resultTupleScheme getScheme() {
        return new AppRegister_resultTupleScheme();
      }
    }

    private static class AppRegister_resultTupleScheme extends TupleScheme<AppRegister_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, AppRegister_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, AppRegister_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class AppLogin_args implements org.apache.thrift.TBase<AppLogin_args, AppLogin_args._Fields>, java.io.Serializable, Cloneable, Comparable<AppLogin_args>, android.os.Parcelable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("AppLogin_args");

    private static final org.apache.thrift.protocol.TField LOGKEY_FIELD_DESC = new org.apache.thrift.protocol.TField("logkey", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField PWD_FIELD_DESC = new org.apache.thrift.protocol.TField("pwd", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField DEVICE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("device_id", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField ACCESS_TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("access_token", org.apache.thrift.protocol.TType.STRING, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new AppLogin_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new AppLogin_argsTupleSchemeFactory());
    }

    public String logkey; // required
    public String pwd; // required
    public String device_id; // required
    public String access_token; // required

    @Override
    public void writeToParcel(android.os.Parcel out, int flags) {
      out.writeString(logkey);
      out.writeString(pwd);
      out.writeString(device_id);
      out.writeString(access_token);
    }

    @Override
    public int describeContents() {
      return 0;
    }

    public AppLogin_args(android.os.Parcel in) {
      this.logkey= in.readString();
      this.pwd= in.readString();
      this.device_id= in.readString();
      this.access_token= in.readString();
    }

    public static final android.os.Parcelable.Creator<AppLogin_args> CREATOR = new android.os.Parcelable.Creator<AppLogin_args>() {
      @Override
      public AppLogin_args[] newArray(int size) {
        return new AppLogin_args[size];
      }

      @Override
      public AppLogin_args createFromParcel(android.os.Parcel in) {
        return new AppLogin_args(in);
      }
    };

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      LOGKEY((short)1, "logkey"),
      PWD((short)2, "pwd"),
      DEVICE_ID((short)3, "device_id"),
      ACCESS_TOKEN((short)4, "access_token");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // LOGKEY
            return LOGKEY;
          case 2: // PWD
            return PWD;
          case 3: // DEVICE_ID
            return DEVICE_ID;
          case 4: // ACCESS_TOKEN
            return ACCESS_TOKEN;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.LOGKEY, new org.apache.thrift.meta_data.FieldMetaData("logkey", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PWD, new org.apache.thrift.meta_data.FieldMetaData("pwd", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.DEVICE_ID, new org.apache.thrift.meta_data.FieldMetaData("device_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ACCESS_TOKEN, new org.apache.thrift.meta_data.FieldMetaData("access_token", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(AppLogin_args.class, metaDataMap);
    }

    public AppLogin_args() {
    }

    public AppLogin_args(
      String logkey,
      String pwd,
      String device_id,
      String access_token)
    {
      this();
      this.logkey = logkey;
      this.pwd = pwd;
      this.device_id = device_id;
      this.access_token = access_token;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public AppLogin_args(AppLogin_args other) {
      if (other.isSetLogkey()) {
        this.logkey = other.logkey;
      }
      if (other.isSetPwd()) {
        this.pwd = other.pwd;
      }
      if (other.isSetDevice_id()) {
        this.device_id = other.device_id;
      }
      if (other.isSetAccess_token()) {
        this.access_token = other.access_token;
      }
    }

    public AppLogin_args deepCopy() {
      return new AppLogin_args(this);
    }

    @Override
    public void clear() {
      this.logkey = null;
      this.pwd = null;
      this.device_id = null;
      this.access_token = null;
    }

    public String getLogkey() {
      return this.logkey;
    }

    public AppLogin_args setLogkey(String logkey) {
      this.logkey = logkey;
      return this;
    }

    public void unsetLogkey() {
      this.logkey = null;
    }

    /** Returns true if field logkey is set (has been assigned a value) and false otherwise */
    public boolean isSetLogkey() {
      return this.logkey != null;
    }

    public void setLogkeyIsSet(boolean value) {
      if (!value) {
        this.logkey = null;
      }
    }

    public String getPwd() {
      return this.pwd;
    }

    public AppLogin_args setPwd(String pwd) {
      this.pwd = pwd;
      return this;
    }

    public void unsetPwd() {
      this.pwd = null;
    }

    /** Returns true if field pwd is set (has been assigned a value) and false otherwise */
    public boolean isSetPwd() {
      return this.pwd != null;
    }

    public void setPwdIsSet(boolean value) {
      if (!value) {
        this.pwd = null;
      }
    }

    public String getDevice_id() {
      return this.device_id;
    }

    public AppLogin_args setDevice_id(String device_id) {
      this.device_id = device_id;
      return this;
    }

    public void unsetDevice_id() {
      this.device_id = null;
    }

    /** Returns true if field device_id is set (has been assigned a value) and false otherwise */
    public boolean isSetDevice_id() {
      return this.device_id != null;
    }

    public void setDevice_idIsSet(boolean value) {
      if (!value) {
        this.device_id = null;
      }
    }

    public String getAccess_token() {
      return this.access_token;
    }

    public AppLogin_args setAccess_token(String access_token) {
      this.access_token = access_token;
      return this;
    }

    public void unsetAccess_token() {
      this.access_token = null;
    }

    /** Returns true if field access_token is set (has been assigned a value) and false otherwise */
    public boolean isSetAccess_token() {
      return this.access_token != null;
    }

    public void setAccess_tokenIsSet(boolean value) {
      if (!value) {
        this.access_token = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case LOGKEY:
        if (value == null) {
          unsetLogkey();
        } else {
          setLogkey((String)value);
        }
        break;

      case PWD:
        if (value == null) {
          unsetPwd();
        } else {
          setPwd((String)value);
        }
        break;

      case DEVICE_ID:
        if (value == null) {
          unsetDevice_id();
        } else {
          setDevice_id((String)value);
        }
        break;

      case ACCESS_TOKEN:
        if (value == null) {
          unsetAccess_token();
        } else {
          setAccess_token((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case LOGKEY:
        return getLogkey();

      case PWD:
        return getPwd();

      case DEVICE_ID:
        return getDevice_id();

      case ACCESS_TOKEN:
        return getAccess_token();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case LOGKEY:
        return isSetLogkey();
      case PWD:
        return isSetPwd();
      case DEVICE_ID:
        return isSetDevice_id();
      case ACCESS_TOKEN:
        return isSetAccess_token();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof AppLogin_args)
        return this.equals((AppLogin_args)that);
      return false;
    }

    public boolean equals(AppLogin_args that) {
      if (that == null)
        return false;

      boolean this_present_logkey = true && this.isSetLogkey();
      boolean that_present_logkey = true && that.isSetLogkey();
      if (this_present_logkey || that_present_logkey) {
        if (!(this_present_logkey && that_present_logkey))
          return false;
        if (!this.logkey.equals(that.logkey))
          return false;
      }

      boolean this_present_pwd = true && this.isSetPwd();
      boolean that_present_pwd = true && that.isSetPwd();
      if (this_present_pwd || that_present_pwd) {
        if (!(this_present_pwd && that_present_pwd))
          return false;
        if (!this.pwd.equals(that.pwd))
          return false;
      }

      boolean this_present_device_id = true && this.isSetDevice_id();
      boolean that_present_device_id = true && that.isSetDevice_id();
      if (this_present_device_id || that_present_device_id) {
        if (!(this_present_device_id && that_present_device_id))
          return false;
        if (!this.device_id.equals(that.device_id))
          return false;
      }

      boolean this_present_access_token = true && this.isSetAccess_token();
      boolean that_present_access_token = true && that.isSetAccess_token();
      if (this_present_access_token || that_present_access_token) {
        if (!(this_present_access_token && that_present_access_token))
          return false;
        if (!this.access_token.equals(that.access_token))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_logkey = true && (isSetLogkey());
      list.add(present_logkey);
      if (present_logkey)
        list.add(logkey);

      boolean present_pwd = true && (isSetPwd());
      list.add(present_pwd);
      if (present_pwd)
        list.add(pwd);

      boolean present_device_id = true && (isSetDevice_id());
      list.add(present_device_id);
      if (present_device_id)
        list.add(device_id);

      boolean present_access_token = true && (isSetAccess_token());
      list.add(present_access_token);
      if (present_access_token)
        list.add(access_token);

      return list.hashCode();
    }

    @Override
    public int compareTo(AppLogin_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetLogkey()).compareTo(other.isSetLogkey());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLogkey()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.logkey, other.logkey);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPwd()).compareTo(other.isSetPwd());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPwd()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pwd, other.pwd);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDevice_id()).compareTo(other.isSetDevice_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDevice_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.device_id, other.device_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAccess_token()).compareTo(other.isSetAccess_token());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAccess_token()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.access_token, other.access_token);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("AppLogin_args(");
      boolean first = true;

      sb.append("logkey:");
      if (this.logkey == null) {
        sb.append("null");
      } else {
        sb.append(this.logkey);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("pwd:");
      if (this.pwd == null) {
        sb.append("null");
      } else {
        sb.append(this.pwd);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("device_id:");
      if (this.device_id == null) {
        sb.append("null");
      } else {
        sb.append(this.device_id);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("access_token:");
      if (this.access_token == null) {
        sb.append("null");
      } else {
        sb.append(this.access_token);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class AppLogin_argsStandardSchemeFactory implements SchemeFactory {
      public AppLogin_argsStandardScheme getScheme() {
        return new AppLogin_argsStandardScheme();
      }
    }

    private static class AppLogin_argsStandardScheme extends StandardScheme<AppLogin_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, AppLogin_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // LOGKEY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.logkey = iprot.readString();
                struct.setLogkeyIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PWD
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.pwd = iprot.readString();
                struct.setPwdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // DEVICE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.device_id = iprot.readString();
                struct.setDevice_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // ACCESS_TOKEN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.access_token = iprot.readString();
                struct.setAccess_tokenIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, AppLogin_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.logkey != null) {
          oprot.writeFieldBegin(LOGKEY_FIELD_DESC);
          oprot.writeString(struct.logkey);
          oprot.writeFieldEnd();
        }
        if (struct.pwd != null) {
          oprot.writeFieldBegin(PWD_FIELD_DESC);
          oprot.writeString(struct.pwd);
          oprot.writeFieldEnd();
        }
        if (struct.device_id != null) {
          oprot.writeFieldBegin(DEVICE_ID_FIELD_DESC);
          oprot.writeString(struct.device_id);
          oprot.writeFieldEnd();
        }
        if (struct.access_token != null) {
          oprot.writeFieldBegin(ACCESS_TOKEN_FIELD_DESC);
          oprot.writeString(struct.access_token);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class AppLogin_argsTupleSchemeFactory implements SchemeFactory {
      public AppLogin_argsTupleScheme getScheme() {
        return new AppLogin_argsTupleScheme();
      }
    }

    private static class AppLogin_argsTupleScheme extends TupleScheme<AppLogin_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, AppLogin_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetLogkey()) {
          optionals.set(0);
        }
        if (struct.isSetPwd()) {
          optionals.set(1);
        }
        if (struct.isSetDevice_id()) {
          optionals.set(2);
        }
        if (struct.isSetAccess_token()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetLogkey()) {
          oprot.writeString(struct.logkey);
        }
        if (struct.isSetPwd()) {
          oprot.writeString(struct.pwd);
        }
        if (struct.isSetDevice_id()) {
          oprot.writeString(struct.device_id);
        }
        if (struct.isSetAccess_token()) {
          oprot.writeString(struct.access_token);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, AppLogin_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.logkey = iprot.readString();
          struct.setLogkeyIsSet(true);
        }
        if (incoming.get(1)) {
          struct.pwd = iprot.readString();
          struct.setPwdIsSet(true);
        }
        if (incoming.get(2)) {
          struct.device_id = iprot.readString();
          struct.setDevice_idIsSet(true);
        }
        if (incoming.get(3)) {
          struct.access_token = iprot.readString();
          struct.setAccess_tokenIsSet(true);
        }
      }
    }

  }

  public static class AppLogin_result implements org.apache.thrift.TBase<AppLogin_result, AppLogin_result._Fields>, java.io.Serializable, Cloneable, Comparable<AppLogin_result>, android.os.Parcelable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("AppLogin_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new AppLogin_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new AppLogin_resultTupleSchemeFactory());
    }

    public String success; // required

    @Override
    public void writeToParcel(android.os.Parcel out, int flags) {
      out.writeString(success);
    }

    @Override
    public int describeContents() {
      return 0;
    }

    public AppLogin_result(android.os.Parcel in) {
      this.success= in.readString();
    }

    public static final android.os.Parcelable.Creator<AppLogin_result> CREATOR = new android.os.Parcelable.Creator<AppLogin_result>() {
      @Override
      public AppLogin_result[] newArray(int size) {
        return new AppLogin_result[size];
      }

      @Override
      public AppLogin_result createFromParcel(android.os.Parcel in) {
        return new AppLogin_result(in);
      }
    };

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(AppLogin_result.class, metaDataMap);
    }

    public AppLogin_result() {
    }

    public AppLogin_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public AppLogin_result(AppLogin_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public AppLogin_result deepCopy() {
      return new AppLogin_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public AppLogin_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof AppLogin_result)
        return this.equals((AppLogin_result)that);
      return false;
    }

    public boolean equals(AppLogin_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(AppLogin_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("AppLogin_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class AppLogin_resultStandardSchemeFactory implements SchemeFactory {
      public AppLogin_resultStandardScheme getScheme() {
        return new AppLogin_resultStandardScheme();
      }
    }

    private static class AppLogin_resultStandardScheme extends StandardScheme<AppLogin_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, AppLogin_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, AppLogin_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class AppLogin_resultTupleSchemeFactory implements SchemeFactory {
      public AppLogin_resultTupleScheme getScheme() {
        return new AppLogin_resultTupleScheme();
      }
    }

    private static class AppLogin_resultTupleScheme extends TupleScheme<AppLogin_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, AppLogin_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, AppLogin_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class AccessToken_args implements org.apache.thrift.TBase<AccessToken_args, AccessToken_args._Fields>, java.io.Serializable, Cloneable, Comparable<AccessToken_args>, android.os.Parcelable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("AccessToken_args");

    private static final org.apache.thrift.protocol.TField APPID_FIELD_DESC = new org.apache.thrift.protocol.TField("appid", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField SECRET_FIELD_DESC = new org.apache.thrift.protocol.TField("secret", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new AccessToken_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new AccessToken_argsTupleSchemeFactory());
    }

    public String appid; // required
    public String secret; // required

    @Override
    public void writeToParcel(android.os.Parcel out, int flags) {
      out.writeString(appid);
      out.writeString(secret);
    }

    @Override
    public int describeContents() {
      return 0;
    }

    public AccessToken_args(android.os.Parcel in) {
      this.appid= in.readString();
      this.secret= in.readString();
    }

    public static final android.os.Parcelable.Creator<AccessToken_args> CREATOR = new android.os.Parcelable.Creator<AccessToken_args>() {
      @Override
      public AccessToken_args[] newArray(int size) {
        return new AccessToken_args[size];
      }

      @Override
      public AccessToken_args createFromParcel(android.os.Parcel in) {
        return new AccessToken_args(in);
      }
    };

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      APPID((short)1, "appid"),
      SECRET((short)2, "secret");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // APPID
            return APPID;
          case 2: // SECRET
            return SECRET;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.APPID, new org.apache.thrift.meta_data.FieldMetaData("appid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.SECRET, new org.apache.thrift.meta_data.FieldMetaData("secret", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(AccessToken_args.class, metaDataMap);
    }

    public AccessToken_args() {
    }

    public AccessToken_args(
      String appid,
      String secret)
    {
      this();
      this.appid = appid;
      this.secret = secret;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public AccessToken_args(AccessToken_args other) {
      if (other.isSetAppid()) {
        this.appid = other.appid;
      }
      if (other.isSetSecret()) {
        this.secret = other.secret;
      }
    }

    public AccessToken_args deepCopy() {
      return new AccessToken_args(this);
    }

    @Override
    public void clear() {
      this.appid = null;
      this.secret = null;
    }

    public String getAppid() {
      return this.appid;
    }

    public AccessToken_args setAppid(String appid) {
      this.appid = appid;
      return this;
    }

    public void unsetAppid() {
      this.appid = null;
    }

    /** Returns true if field appid is set (has been assigned a value) and false otherwise */
    public boolean isSetAppid() {
      return this.appid != null;
    }

    public void setAppidIsSet(boolean value) {
      if (!value) {
        this.appid = null;
      }
    }

    public String getSecret() {
      return this.secret;
    }

    public AccessToken_args setSecret(String secret) {
      this.secret = secret;
      return this;
    }

    public void unsetSecret() {
      this.secret = null;
    }

    /** Returns true if field secret is set (has been assigned a value) and false otherwise */
    public boolean isSetSecret() {
      return this.secret != null;
    }

    public void setSecretIsSet(boolean value) {
      if (!value) {
        this.secret = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case APPID:
        if (value == null) {
          unsetAppid();
        } else {
          setAppid((String)value);
        }
        break;

      case SECRET:
        if (value == null) {
          unsetSecret();
        } else {
          setSecret((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case APPID:
        return getAppid();

      case SECRET:
        return getSecret();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case APPID:
        return isSetAppid();
      case SECRET:
        return isSetSecret();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof AccessToken_args)
        return this.equals((AccessToken_args)that);
      return false;
    }

    public boolean equals(AccessToken_args that) {
      if (that == null)
        return false;

      boolean this_present_appid = true && this.isSetAppid();
      boolean that_present_appid = true && that.isSetAppid();
      if (this_present_appid || that_present_appid) {
        if (!(this_present_appid && that_present_appid))
          return false;
        if (!this.appid.equals(that.appid))
          return false;
      }

      boolean this_present_secret = true && this.isSetSecret();
      boolean that_present_secret = true && that.isSetSecret();
      if (this_present_secret || that_present_secret) {
        if (!(this_present_secret && that_present_secret))
          return false;
        if (!this.secret.equals(that.secret))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_appid = true && (isSetAppid());
      list.add(present_appid);
      if (present_appid)
        list.add(appid);

      boolean present_secret = true && (isSetSecret());
      list.add(present_secret);
      if (present_secret)
        list.add(secret);

      return list.hashCode();
    }

    @Override
    public int compareTo(AccessToken_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetAppid()).compareTo(other.isSetAppid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAppid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.appid, other.appid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSecret()).compareTo(other.isSetSecret());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSecret()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.secret, other.secret);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("AccessToken_args(");
      boolean first = true;

      sb.append("appid:");
      if (this.appid == null) {
        sb.append("null");
      } else {
        sb.append(this.appid);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("secret:");
      if (this.secret == null) {
        sb.append("null");
      } else {
        sb.append(this.secret);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class AccessToken_argsStandardSchemeFactory implements SchemeFactory {
      public AccessToken_argsStandardScheme getScheme() {
        return new AccessToken_argsStandardScheme();
      }
    }

    private static class AccessToken_argsStandardScheme extends StandardScheme<AccessToken_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, AccessToken_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // APPID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.appid = iprot.readString();
                struct.setAppidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SECRET
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.secret = iprot.readString();
                struct.setSecretIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, AccessToken_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.appid != null) {
          oprot.writeFieldBegin(APPID_FIELD_DESC);
          oprot.writeString(struct.appid);
          oprot.writeFieldEnd();
        }
        if (struct.secret != null) {
          oprot.writeFieldBegin(SECRET_FIELD_DESC);
          oprot.writeString(struct.secret);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class AccessToken_argsTupleSchemeFactory implements SchemeFactory {
      public AccessToken_argsTupleScheme getScheme() {
        return new AccessToken_argsTupleScheme();
      }
    }

    private static class AccessToken_argsTupleScheme extends TupleScheme<AccessToken_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, AccessToken_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetAppid()) {
          optionals.set(0);
        }
        if (struct.isSetSecret()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetAppid()) {
          oprot.writeString(struct.appid);
        }
        if (struct.isSetSecret()) {
          oprot.writeString(struct.secret);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, AccessToken_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.appid = iprot.readString();
          struct.setAppidIsSet(true);
        }
        if (incoming.get(1)) {
          struct.secret = iprot.readString();
          struct.setSecretIsSet(true);
        }
      }
    }

  }

  public static class AccessToken_result implements org.apache.thrift.TBase<AccessToken_result, AccessToken_result._Fields>, java.io.Serializable, Cloneable, Comparable<AccessToken_result>, android.os.Parcelable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("AccessToken_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new AccessToken_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new AccessToken_resultTupleSchemeFactory());
    }

    public String success; // required

    @Override
    public void writeToParcel(android.os.Parcel out, int flags) {
      out.writeString(success);
    }

    @Override
    public int describeContents() {
      return 0;
    }

    public AccessToken_result(android.os.Parcel in) {
      this.success= in.readString();
    }

    public static final android.os.Parcelable.Creator<AccessToken_result> CREATOR = new android.os.Parcelable.Creator<AccessToken_result>() {
      @Override
      public AccessToken_result[] newArray(int size) {
        return new AccessToken_result[size];
      }

      @Override
      public AccessToken_result createFromParcel(android.os.Parcel in) {
        return new AccessToken_result(in);
      }
    };

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(AccessToken_result.class, metaDataMap);
    }

    public AccessToken_result() {
    }

    public AccessToken_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public AccessToken_result(AccessToken_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public AccessToken_result deepCopy() {
      return new AccessToken_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public AccessToken_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof AccessToken_result)
        return this.equals((AccessToken_result)that);
      return false;
    }

    public boolean equals(AccessToken_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(AccessToken_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("AccessToken_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class AccessToken_resultStandardSchemeFactory implements SchemeFactory {
      public AccessToken_resultStandardScheme getScheme() {
        return new AccessToken_resultStandardScheme();
      }
    }

    private static class AccessToken_resultStandardScheme extends StandardScheme<AccessToken_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, AccessToken_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, AccessToken_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class AccessToken_resultTupleSchemeFactory implements SchemeFactory {
      public AccessToken_resultTupleScheme getScheme() {
        return new AccessToken_resultTupleScheme();
      }
    }

    private static class AccessToken_resultTupleScheme extends TupleScheme<AccessToken_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, AccessToken_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, AccessToken_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class Authorize_args implements org.apache.thrift.TBase<Authorize_args, Authorize_args._Fields>, java.io.Serializable, Cloneable, Comparable<Authorize_args>, android.os.Parcelable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Authorize_args");

    private static final org.apache.thrift.protocol.TField APPID_FIELD_DESC = new org.apache.thrift.protocol.TField("appid", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField RESPONSE_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("response_type", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField SCOPE_FIELD_DESC = new org.apache.thrift.protocol.TField("scope", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField STATE_FIELD_DESC = new org.apache.thrift.protocol.TField("state", org.apache.thrift.protocol.TType.STRING, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new Authorize_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new Authorize_argsTupleSchemeFactory());
    }

    public String appid; // required
    public String response_type; // required
    public String scope; // required
    public String state; // required

    @Override
    public void writeToParcel(android.os.Parcel out, int flags) {
      out.writeString(appid);
      out.writeString(response_type);
      out.writeString(scope);
      out.writeString(state);
    }

    @Override
    public int describeContents() {
      return 0;
    }

    public Authorize_args(android.os.Parcel in) {
      this.appid= in.readString();
      this.response_type= in.readString();
      this.scope= in.readString();
      this.state= in.readString();
    }

    public static final android.os.Parcelable.Creator<Authorize_args> CREATOR = new android.os.Parcelable.Creator<Authorize_args>() {
      @Override
      public Authorize_args[] newArray(int size) {
        return new Authorize_args[size];
      }

      @Override
      public Authorize_args createFromParcel(android.os.Parcel in) {
        return new Authorize_args(in);
      }
    };

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      APPID((short)1, "appid"),
      RESPONSE_TYPE((short)2, "response_type"),
      SCOPE((short)3, "scope"),
      STATE((short)4, "state");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // APPID
            return APPID;
          case 2: // RESPONSE_TYPE
            return RESPONSE_TYPE;
          case 3: // SCOPE
            return SCOPE;
          case 4: // STATE
            return STATE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.APPID, new org.apache.thrift.meta_data.FieldMetaData("appid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.RESPONSE_TYPE, new org.apache.thrift.meta_data.FieldMetaData("response_type", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.SCOPE, new org.apache.thrift.meta_data.FieldMetaData("scope", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.STATE, new org.apache.thrift.meta_data.FieldMetaData("state", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Authorize_args.class, metaDataMap);
    }

    public Authorize_args() {
    }

    public Authorize_args(
      String appid,
      String response_type,
      String scope,
      String state)
    {
      this();
      this.appid = appid;
      this.response_type = response_type;
      this.scope = scope;
      this.state = state;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public Authorize_args(Authorize_args other) {
      if (other.isSetAppid()) {
        this.appid = other.appid;
      }
      if (other.isSetResponse_type()) {
        this.response_type = other.response_type;
      }
      if (other.isSetScope()) {
        this.scope = other.scope;
      }
      if (other.isSetState()) {
        this.state = other.state;
      }
    }

    public Authorize_args deepCopy() {
      return new Authorize_args(this);
    }

    @Override
    public void clear() {
      this.appid = null;
      this.response_type = null;
      this.scope = null;
      this.state = null;
    }

    public String getAppid() {
      return this.appid;
    }

    public Authorize_args setAppid(String appid) {
      this.appid = appid;
      return this;
    }

    public void unsetAppid() {
      this.appid = null;
    }

    /** Returns true if field appid is set (has been assigned a value) and false otherwise */
    public boolean isSetAppid() {
      return this.appid != null;
    }

    public void setAppidIsSet(boolean value) {
      if (!value) {
        this.appid = null;
      }
    }

    public String getResponse_type() {
      return this.response_type;
    }

    public Authorize_args setResponse_type(String response_type) {
      this.response_type = response_type;
      return this;
    }

    public void unsetResponse_type() {
      this.response_type = null;
    }

    /** Returns true if field response_type is set (has been assigned a value) and false otherwise */
    public boolean isSetResponse_type() {
      return this.response_type != null;
    }

    public void setResponse_typeIsSet(boolean value) {
      if (!value) {
        this.response_type = null;
      }
    }

    public String getScope() {
      return this.scope;
    }

    public Authorize_args setScope(String scope) {
      this.scope = scope;
      return this;
    }

    public void unsetScope() {
      this.scope = null;
    }

    /** Returns true if field scope is set (has been assigned a value) and false otherwise */
    public boolean isSetScope() {
      return this.scope != null;
    }

    public void setScopeIsSet(boolean value) {
      if (!value) {
        this.scope = null;
      }
    }

    public String getState() {
      return this.state;
    }

    public Authorize_args setState(String state) {
      this.state = state;
      return this;
    }

    public void unsetState() {
      this.state = null;
    }

    /** Returns true if field state is set (has been assigned a value) and false otherwise */
    public boolean isSetState() {
      return this.state != null;
    }

    public void setStateIsSet(boolean value) {
      if (!value) {
        this.state = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case APPID:
        if (value == null) {
          unsetAppid();
        } else {
          setAppid((String)value);
        }
        break;

      case RESPONSE_TYPE:
        if (value == null) {
          unsetResponse_type();
        } else {
          setResponse_type((String)value);
        }
        break;

      case SCOPE:
        if (value == null) {
          unsetScope();
        } else {
          setScope((String)value);
        }
        break;

      case STATE:
        if (value == null) {
          unsetState();
        } else {
          setState((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case APPID:
        return getAppid();

      case RESPONSE_TYPE:
        return getResponse_type();

      case SCOPE:
        return getScope();

      case STATE:
        return getState();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case APPID:
        return isSetAppid();
      case RESPONSE_TYPE:
        return isSetResponse_type();
      case SCOPE:
        return isSetScope();
      case STATE:
        return isSetState();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof Authorize_args)
        return this.equals((Authorize_args)that);
      return false;
    }

    public boolean equals(Authorize_args that) {
      if (that == null)
        return false;

      boolean this_present_appid = true && this.isSetAppid();
      boolean that_present_appid = true && that.isSetAppid();
      if (this_present_appid || that_present_appid) {
        if (!(this_present_appid && that_present_appid))
          return false;
        if (!this.appid.equals(that.appid))
          return false;
      }

      boolean this_present_response_type = true && this.isSetResponse_type();
      boolean that_present_response_type = true && that.isSetResponse_type();
      if (this_present_response_type || that_present_response_type) {
        if (!(this_present_response_type && that_present_response_type))
          return false;
        if (!this.response_type.equals(that.response_type))
          return false;
      }

      boolean this_present_scope = true && this.isSetScope();
      boolean that_present_scope = true && that.isSetScope();
      if (this_present_scope || that_present_scope) {
        if (!(this_present_scope && that_present_scope))
          return false;
        if (!this.scope.equals(that.scope))
          return false;
      }

      boolean this_present_state = true && this.isSetState();
      boolean that_present_state = true && that.isSetState();
      if (this_present_state || that_present_state) {
        if (!(this_present_state && that_present_state))
          return false;
        if (!this.state.equals(that.state))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_appid = true && (isSetAppid());
      list.add(present_appid);
      if (present_appid)
        list.add(appid);

      boolean present_response_type = true && (isSetResponse_type());
      list.add(present_response_type);
      if (present_response_type)
        list.add(response_type);

      boolean present_scope = true && (isSetScope());
      list.add(present_scope);
      if (present_scope)
        list.add(scope);

      boolean present_state = true && (isSetState());
      list.add(present_state);
      if (present_state)
        list.add(state);

      return list.hashCode();
    }

    @Override
    public int compareTo(Authorize_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetAppid()).compareTo(other.isSetAppid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAppid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.appid, other.appid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetResponse_type()).compareTo(other.isSetResponse_type());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetResponse_type()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.response_type, other.response_type);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetScope()).compareTo(other.isSetScope());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetScope()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.scope, other.scope);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetState()).compareTo(other.isSetState());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetState()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.state, other.state);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("Authorize_args(");
      boolean first = true;

      sb.append("appid:");
      if (this.appid == null) {
        sb.append("null");
      } else {
        sb.append(this.appid);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("response_type:");
      if (this.response_type == null) {
        sb.append("null");
      } else {
        sb.append(this.response_type);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("scope:");
      if (this.scope == null) {
        sb.append("null");
      } else {
        sb.append(this.scope);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("state:");
      if (this.state == null) {
        sb.append("null");
      } else {
        sb.append(this.state);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class Authorize_argsStandardSchemeFactory implements SchemeFactory {
      public Authorize_argsStandardScheme getScheme() {
        return new Authorize_argsStandardScheme();
      }
    }

    private static class Authorize_argsStandardScheme extends StandardScheme<Authorize_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, Authorize_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // APPID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.appid = iprot.readString();
                struct.setAppidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // RESPONSE_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.response_type = iprot.readString();
                struct.setResponse_typeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // SCOPE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.scope = iprot.readString();
                struct.setScopeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // STATE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.state = iprot.readString();
                struct.setStateIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, Authorize_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.appid != null) {
          oprot.writeFieldBegin(APPID_FIELD_DESC);
          oprot.writeString(struct.appid);
          oprot.writeFieldEnd();
        }
        if (struct.response_type != null) {
          oprot.writeFieldBegin(RESPONSE_TYPE_FIELD_DESC);
          oprot.writeString(struct.response_type);
          oprot.writeFieldEnd();
        }
        if (struct.scope != null) {
          oprot.writeFieldBegin(SCOPE_FIELD_DESC);
          oprot.writeString(struct.scope);
          oprot.writeFieldEnd();
        }
        if (struct.state != null) {
          oprot.writeFieldBegin(STATE_FIELD_DESC);
          oprot.writeString(struct.state);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class Authorize_argsTupleSchemeFactory implements SchemeFactory {
      public Authorize_argsTupleScheme getScheme() {
        return new Authorize_argsTupleScheme();
      }
    }

    private static class Authorize_argsTupleScheme extends TupleScheme<Authorize_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, Authorize_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetAppid()) {
          optionals.set(0);
        }
        if (struct.isSetResponse_type()) {
          optionals.set(1);
        }
        if (struct.isSetScope()) {
          optionals.set(2);
        }
        if (struct.isSetState()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetAppid()) {
          oprot.writeString(struct.appid);
        }
        if (struct.isSetResponse_type()) {
          oprot.writeString(struct.response_type);
        }
        if (struct.isSetScope()) {
          oprot.writeString(struct.scope);
        }
        if (struct.isSetState()) {
          oprot.writeString(struct.state);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, Authorize_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.appid = iprot.readString();
          struct.setAppidIsSet(true);
        }
        if (incoming.get(1)) {
          struct.response_type = iprot.readString();
          struct.setResponse_typeIsSet(true);
        }
        if (incoming.get(2)) {
          struct.scope = iprot.readString();
          struct.setScopeIsSet(true);
        }
        if (incoming.get(3)) {
          struct.state = iprot.readString();
          struct.setStateIsSet(true);
        }
      }
    }

  }

  public static class Authorize_result implements org.apache.thrift.TBase<Authorize_result, Authorize_result._Fields>, java.io.Serializable, Cloneable, Comparable<Authorize_result>, android.os.Parcelable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Authorize_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new Authorize_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new Authorize_resultTupleSchemeFactory());
    }

    public String success; // required

    @Override
    public void writeToParcel(android.os.Parcel out, int flags) {
      out.writeString(success);
    }

    @Override
    public int describeContents() {
      return 0;
    }

    public Authorize_result(android.os.Parcel in) {
      this.success= in.readString();
    }

    public static final android.os.Parcelable.Creator<Authorize_result> CREATOR = new android.os.Parcelable.Creator<Authorize_result>() {
      @Override
      public Authorize_result[] newArray(int size) {
        return new Authorize_result[size];
      }

      @Override
      public Authorize_result createFromParcel(android.os.Parcel in) {
        return new Authorize_result(in);
      }
    };

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Authorize_result.class, metaDataMap);
    }

    public Authorize_result() {
    }

    public Authorize_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public Authorize_result(Authorize_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public Authorize_result deepCopy() {
      return new Authorize_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public Authorize_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof Authorize_result)
        return this.equals((Authorize_result)that);
      return false;
    }

    public boolean equals(Authorize_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(Authorize_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("Authorize_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class Authorize_resultStandardSchemeFactory implements SchemeFactory {
      public Authorize_resultStandardScheme getScheme() {
        return new Authorize_resultStandardScheme();
      }
    }

    private static class Authorize_resultStandardScheme extends StandardScheme<Authorize_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, Authorize_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, Authorize_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class Authorize_resultTupleSchemeFactory implements SchemeFactory {
      public Authorize_resultTupleScheme getScheme() {
        return new Authorize_resultTupleScheme();
      }
    }

    private static class Authorize_resultTupleScheme extends TupleScheme<Authorize_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, Authorize_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, Authorize_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class Oauth2Token_args implements org.apache.thrift.TBase<Oauth2Token_args, Oauth2Token_args._Fields>, java.io.Serializable, Cloneable, Comparable<Oauth2Token_args>, android.os.Parcelable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Oauth2Token_args");

    private static final org.apache.thrift.protocol.TField APPID_FIELD_DESC = new org.apache.thrift.protocol.TField("appid", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField SECRET_FIELD_DESC = new org.apache.thrift.protocol.TField("secret", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("code", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new Oauth2Token_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new Oauth2Token_argsTupleSchemeFactory());
    }

    public String appid; // required
    public String secret; // required
    public String code; // required

    @Override
    public void writeToParcel(android.os.Parcel out, int flags) {
      out.writeString(appid);
      out.writeString(secret);
      out.writeString(code);
    }

    @Override
    public int describeContents() {
      return 0;
    }

    public Oauth2Token_args(android.os.Parcel in) {
      this.appid= in.readString();
      this.secret= in.readString();
      this.code= in.readString();
    }

    public static final android.os.Parcelable.Creator<Oauth2Token_args> CREATOR = new android.os.Parcelable.Creator<Oauth2Token_args>() {
      @Override
      public Oauth2Token_args[] newArray(int size) {
        return new Oauth2Token_args[size];
      }

      @Override
      public Oauth2Token_args createFromParcel(android.os.Parcel in) {
        return new Oauth2Token_args(in);
      }
    };

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      APPID((short)1, "appid"),
      SECRET((short)2, "secret"),
      CODE((short)3, "code");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // APPID
            return APPID;
          case 2: // SECRET
            return SECRET;
          case 3: // CODE
            return CODE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.APPID, new org.apache.thrift.meta_data.FieldMetaData("appid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.SECRET, new org.apache.thrift.meta_data.FieldMetaData("secret", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.CODE, new org.apache.thrift.meta_data.FieldMetaData("code", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Oauth2Token_args.class, metaDataMap);
    }

    public Oauth2Token_args() {
    }

    public Oauth2Token_args(
      String appid,
      String secret,
      String code)
    {
      this();
      this.appid = appid;
      this.secret = secret;
      this.code = code;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public Oauth2Token_args(Oauth2Token_args other) {
      if (other.isSetAppid()) {
        this.appid = other.appid;
      }
      if (other.isSetSecret()) {
        this.secret = other.secret;
      }
      if (other.isSetCode()) {
        this.code = other.code;
      }
    }

    public Oauth2Token_args deepCopy() {
      return new Oauth2Token_args(this);
    }

    @Override
    public void clear() {
      this.appid = null;
      this.secret = null;
      this.code = null;
    }

    public String getAppid() {
      return this.appid;
    }

    public Oauth2Token_args setAppid(String appid) {
      this.appid = appid;
      return this;
    }

    public void unsetAppid() {
      this.appid = null;
    }

    /** Returns true if field appid is set (has been assigned a value) and false otherwise */
    public boolean isSetAppid() {
      return this.appid != null;
    }

    public void setAppidIsSet(boolean value) {
      if (!value) {
        this.appid = null;
      }
    }

    public String getSecret() {
      return this.secret;
    }

    public Oauth2Token_args setSecret(String secret) {
      this.secret = secret;
      return this;
    }

    public void unsetSecret() {
      this.secret = null;
    }

    /** Returns true if field secret is set (has been assigned a value) and false otherwise */
    public boolean isSetSecret() {
      return this.secret != null;
    }

    public void setSecretIsSet(boolean value) {
      if (!value) {
        this.secret = null;
      }
    }

    public String getCode() {
      return this.code;
    }

    public Oauth2Token_args setCode(String code) {
      this.code = code;
      return this;
    }

    public void unsetCode() {
      this.code = null;
    }

    /** Returns true if field code is set (has been assigned a value) and false otherwise */
    public boolean isSetCode() {
      return this.code != null;
    }

    public void setCodeIsSet(boolean value) {
      if (!value) {
        this.code = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case APPID:
        if (value == null) {
          unsetAppid();
        } else {
          setAppid((String)value);
        }
        break;

      case SECRET:
        if (value == null) {
          unsetSecret();
        } else {
          setSecret((String)value);
        }
        break;

      case CODE:
        if (value == null) {
          unsetCode();
        } else {
          setCode((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case APPID:
        return getAppid();

      case SECRET:
        return getSecret();

      case CODE:
        return getCode();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case APPID:
        return isSetAppid();
      case SECRET:
        return isSetSecret();
      case CODE:
        return isSetCode();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof Oauth2Token_args)
        return this.equals((Oauth2Token_args)that);
      return false;
    }

    public boolean equals(Oauth2Token_args that) {
      if (that == null)
        return false;

      boolean this_present_appid = true && this.isSetAppid();
      boolean that_present_appid = true && that.isSetAppid();
      if (this_present_appid || that_present_appid) {
        if (!(this_present_appid && that_present_appid))
          return false;
        if (!this.appid.equals(that.appid))
          return false;
      }

      boolean this_present_secret = true && this.isSetSecret();
      boolean that_present_secret = true && that.isSetSecret();
      if (this_present_secret || that_present_secret) {
        if (!(this_present_secret && that_present_secret))
          return false;
        if (!this.secret.equals(that.secret))
          return false;
      }

      boolean this_present_code = true && this.isSetCode();
      boolean that_present_code = true && that.isSetCode();
      if (this_present_code || that_present_code) {
        if (!(this_present_code && that_present_code))
          return false;
        if (!this.code.equals(that.code))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_appid = true && (isSetAppid());
      list.add(present_appid);
      if (present_appid)
        list.add(appid);

      boolean present_secret = true && (isSetSecret());
      list.add(present_secret);
      if (present_secret)
        list.add(secret);

      boolean present_code = true && (isSetCode());
      list.add(present_code);
      if (present_code)
        list.add(code);

      return list.hashCode();
    }

    @Override
    public int compareTo(Oauth2Token_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetAppid()).compareTo(other.isSetAppid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAppid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.appid, other.appid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSecret()).compareTo(other.isSetSecret());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSecret()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.secret, other.secret);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCode()).compareTo(other.isSetCode());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCode()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.code, other.code);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("Oauth2Token_args(");
      boolean first = true;

      sb.append("appid:");
      if (this.appid == null) {
        sb.append("null");
      } else {
        sb.append(this.appid);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("secret:");
      if (this.secret == null) {
        sb.append("null");
      } else {
        sb.append(this.secret);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("code:");
      if (this.code == null) {
        sb.append("null");
      } else {
        sb.append(this.code);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class Oauth2Token_argsStandardSchemeFactory implements SchemeFactory {
      public Oauth2Token_argsStandardScheme getScheme() {
        return new Oauth2Token_argsStandardScheme();
      }
    }

    private static class Oauth2Token_argsStandardScheme extends StandardScheme<Oauth2Token_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, Oauth2Token_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // APPID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.appid = iprot.readString();
                struct.setAppidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SECRET
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.secret = iprot.readString();
                struct.setSecretIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // CODE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.code = iprot.readString();
                struct.setCodeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, Oauth2Token_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.appid != null) {
          oprot.writeFieldBegin(APPID_FIELD_DESC);
          oprot.writeString(struct.appid);
          oprot.writeFieldEnd();
        }
        if (struct.secret != null) {
          oprot.writeFieldBegin(SECRET_FIELD_DESC);
          oprot.writeString(struct.secret);
          oprot.writeFieldEnd();
        }
        if (struct.code != null) {
          oprot.writeFieldBegin(CODE_FIELD_DESC);
          oprot.writeString(struct.code);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class Oauth2Token_argsTupleSchemeFactory implements SchemeFactory {
      public Oauth2Token_argsTupleScheme getScheme() {
        return new Oauth2Token_argsTupleScheme();
      }
    }

    private static class Oauth2Token_argsTupleScheme extends TupleScheme<Oauth2Token_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, Oauth2Token_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetAppid()) {
          optionals.set(0);
        }
        if (struct.isSetSecret()) {
          optionals.set(1);
        }
        if (struct.isSetCode()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetAppid()) {
          oprot.writeString(struct.appid);
        }
        if (struct.isSetSecret()) {
          oprot.writeString(struct.secret);
        }
        if (struct.isSetCode()) {
          oprot.writeString(struct.code);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, Oauth2Token_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.appid = iprot.readString();
          struct.setAppidIsSet(true);
        }
        if (incoming.get(1)) {
          struct.secret = iprot.readString();
          struct.setSecretIsSet(true);
        }
        if (incoming.get(2)) {
          struct.code = iprot.readString();
          struct.setCodeIsSet(true);
        }
      }
    }

  }

  public static class Oauth2Token_result implements org.apache.thrift.TBase<Oauth2Token_result, Oauth2Token_result._Fields>, java.io.Serializable, Cloneable, Comparable<Oauth2Token_result>, android.os.Parcelable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Oauth2Token_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new Oauth2Token_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new Oauth2Token_resultTupleSchemeFactory());
    }

    public String success; // required

    @Override
    public void writeToParcel(android.os.Parcel out, int flags) {
      out.writeString(success);
    }

    @Override
    public int describeContents() {
      return 0;
    }

    public Oauth2Token_result(android.os.Parcel in) {
      this.success= in.readString();
    }

    public static final android.os.Parcelable.Creator<Oauth2Token_result> CREATOR = new android.os.Parcelable.Creator<Oauth2Token_result>() {
      @Override
      public Oauth2Token_result[] newArray(int size) {
        return new Oauth2Token_result[size];
      }

      @Override
      public Oauth2Token_result createFromParcel(android.os.Parcel in) {
        return new Oauth2Token_result(in);
      }
    };

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Oauth2Token_result.class, metaDataMap);
    }

    public Oauth2Token_result() {
    }

    public Oauth2Token_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public Oauth2Token_result(Oauth2Token_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public Oauth2Token_result deepCopy() {
      return new Oauth2Token_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public Oauth2Token_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof Oauth2Token_result)
        return this.equals((Oauth2Token_result)that);
      return false;
    }

    public boolean equals(Oauth2Token_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(Oauth2Token_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("Oauth2Token_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class Oauth2Token_resultStandardSchemeFactory implements SchemeFactory {
      public Oauth2Token_resultStandardScheme getScheme() {
        return new Oauth2Token_resultStandardScheme();
      }
    }

    private static class Oauth2Token_resultStandardScheme extends StandardScheme<Oauth2Token_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, Oauth2Token_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, Oauth2Token_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class Oauth2Token_resultTupleSchemeFactory implements SchemeFactory {
      public Oauth2Token_resultTupleScheme getScheme() {
        return new Oauth2Token_resultTupleScheme();
      }
    }

    private static class Oauth2Token_resultTupleScheme extends TupleScheme<Oauth2Token_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, Oauth2Token_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, Oauth2Token_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class UserInfo_args implements org.apache.thrift.TBase<UserInfo_args, UserInfo_args._Fields>, java.io.Serializable, Cloneable, Comparable<UserInfo_args>, android.os.Parcelable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("UserInfo_args");

    private static final org.apache.thrift.protocol.TField TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("token", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField APPID_FIELD_DESC = new org.apache.thrift.protocol.TField("appid", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField OPENID_FIELD_DESC = new org.apache.thrift.protocol.TField("openid", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new UserInfo_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new UserInfo_argsTupleSchemeFactory());
    }

    public String token; // required
    public String appid; // required
    public String openid; // required

    @Override
    public void writeToParcel(android.os.Parcel out, int flags) {
      out.writeString(token);
      out.writeString(appid);
      out.writeString(openid);
    }

    @Override
    public int describeContents() {
      return 0;
    }

    public UserInfo_args(android.os.Parcel in) {
      this.token= in.readString();
      this.appid= in.readString();
      this.openid= in.readString();
    }

    public static final android.os.Parcelable.Creator<UserInfo_args> CREATOR = new android.os.Parcelable.Creator<UserInfo_args>() {
      @Override
      public UserInfo_args[] newArray(int size) {
        return new UserInfo_args[size];
      }

      @Override
      public UserInfo_args createFromParcel(android.os.Parcel in) {
        return new UserInfo_args(in);
      }
    };

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TOKEN((short)1, "token"),
      APPID((short)2, "appid"),
      OPENID((short)3, "openid");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TOKEN
            return TOKEN;
          case 2: // APPID
            return APPID;
          case 3: // OPENID
            return OPENID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TOKEN, new org.apache.thrift.meta_data.FieldMetaData("token", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.APPID, new org.apache.thrift.meta_data.FieldMetaData("appid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.OPENID, new org.apache.thrift.meta_data.FieldMetaData("openid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(UserInfo_args.class, metaDataMap);
    }

    public UserInfo_args() {
    }

    public UserInfo_args(
      String token,
      String appid,
      String openid)
    {
      this();
      this.token = token;
      this.appid = appid;
      this.openid = openid;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public UserInfo_args(UserInfo_args other) {
      if (other.isSetToken()) {
        this.token = other.token;
      }
      if (other.isSetAppid()) {
        this.appid = other.appid;
      }
      if (other.isSetOpenid()) {
        this.openid = other.openid;
      }
    }

    public UserInfo_args deepCopy() {
      return new UserInfo_args(this);
    }

    @Override
    public void clear() {
      this.token = null;
      this.appid = null;
      this.openid = null;
    }

    public String getToken() {
      return this.token;
    }

    public UserInfo_args setToken(String token) {
      this.token = token;
      return this;
    }

    public void unsetToken() {
      this.token = null;
    }

    /** Returns true if field token is set (has been assigned a value) and false otherwise */
    public boolean isSetToken() {
      return this.token != null;
    }

    public void setTokenIsSet(boolean value) {
      if (!value) {
        this.token = null;
      }
    }

    public String getAppid() {
      return this.appid;
    }

    public UserInfo_args setAppid(String appid) {
      this.appid = appid;
      return this;
    }

    public void unsetAppid() {
      this.appid = null;
    }

    /** Returns true if field appid is set (has been assigned a value) and false otherwise */
    public boolean isSetAppid() {
      return this.appid != null;
    }

    public void setAppidIsSet(boolean value) {
      if (!value) {
        this.appid = null;
      }
    }

    public String getOpenid() {
      return this.openid;
    }

    public UserInfo_args setOpenid(String openid) {
      this.openid = openid;
      return this;
    }

    public void unsetOpenid() {
      this.openid = null;
    }

    /** Returns true if field openid is set (has been assigned a value) and false otherwise */
    public boolean isSetOpenid() {
      return this.openid != null;
    }

    public void setOpenidIsSet(boolean value) {
      if (!value) {
        this.openid = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TOKEN:
        if (value == null) {
          unsetToken();
        } else {
          setToken((String)value);
        }
        break;

      case APPID:
        if (value == null) {
          unsetAppid();
        } else {
          setAppid((String)value);
        }
        break;

      case OPENID:
        if (value == null) {
          unsetOpenid();
        } else {
          setOpenid((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TOKEN:
        return getToken();

      case APPID:
        return getAppid();

      case OPENID:
        return getOpenid();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TOKEN:
        return isSetToken();
      case APPID:
        return isSetAppid();
      case OPENID:
        return isSetOpenid();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof UserInfo_args)
        return this.equals((UserInfo_args)that);
      return false;
    }

    public boolean equals(UserInfo_args that) {
      if (that == null)
        return false;

      boolean this_present_token = true && this.isSetToken();
      boolean that_present_token = true && that.isSetToken();
      if (this_present_token || that_present_token) {
        if (!(this_present_token && that_present_token))
          return false;
        if (!this.token.equals(that.token))
          return false;
      }

      boolean this_present_appid = true && this.isSetAppid();
      boolean that_present_appid = true && that.isSetAppid();
      if (this_present_appid || that_present_appid) {
        if (!(this_present_appid && that_present_appid))
          return false;
        if (!this.appid.equals(that.appid))
          return false;
      }

      boolean this_present_openid = true && this.isSetOpenid();
      boolean that_present_openid = true && that.isSetOpenid();
      if (this_present_openid || that_present_openid) {
        if (!(this_present_openid && that_present_openid))
          return false;
        if (!this.openid.equals(that.openid))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_token = true && (isSetToken());
      list.add(present_token);
      if (present_token)
        list.add(token);

      boolean present_appid = true && (isSetAppid());
      list.add(present_appid);
      if (present_appid)
        list.add(appid);

      boolean present_openid = true && (isSetOpenid());
      list.add(present_openid);
      if (present_openid)
        list.add(openid);

      return list.hashCode();
    }

    @Override
    public int compareTo(UserInfo_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetToken()).compareTo(other.isSetToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetToken()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.token, other.token);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAppid()).compareTo(other.isSetAppid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAppid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.appid, other.appid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOpenid()).compareTo(other.isSetOpenid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOpenid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.openid, other.openid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("UserInfo_args(");
      boolean first = true;

      sb.append("token:");
      if (this.token == null) {
        sb.append("null");
      } else {
        sb.append(this.token);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("appid:");
      if (this.appid == null) {
        sb.append("null");
      } else {
        sb.append(this.appid);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("openid:");
      if (this.openid == null) {
        sb.append("null");
      } else {
        sb.append(this.openid);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class UserInfo_argsStandardSchemeFactory implements SchemeFactory {
      public UserInfo_argsStandardScheme getScheme() {
        return new UserInfo_argsStandardScheme();
      }
    }

    private static class UserInfo_argsStandardScheme extends StandardScheme<UserInfo_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, UserInfo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TOKEN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.token = iprot.readString();
                struct.setTokenIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // APPID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.appid = iprot.readString();
                struct.setAppidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // OPENID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.openid = iprot.readString();
                struct.setOpenidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, UserInfo_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.token != null) {
          oprot.writeFieldBegin(TOKEN_FIELD_DESC);
          oprot.writeString(struct.token);
          oprot.writeFieldEnd();
        }
        if (struct.appid != null) {
          oprot.writeFieldBegin(APPID_FIELD_DESC);
          oprot.writeString(struct.appid);
          oprot.writeFieldEnd();
        }
        if (struct.openid != null) {
          oprot.writeFieldBegin(OPENID_FIELD_DESC);
          oprot.writeString(struct.openid);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class UserInfo_argsTupleSchemeFactory implements SchemeFactory {
      public UserInfo_argsTupleScheme getScheme() {
        return new UserInfo_argsTupleScheme();
      }
    }

    private static class UserInfo_argsTupleScheme extends TupleScheme<UserInfo_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, UserInfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetToken()) {
          optionals.set(0);
        }
        if (struct.isSetAppid()) {
          optionals.set(1);
        }
        if (struct.isSetOpenid()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetToken()) {
          oprot.writeString(struct.token);
        }
        if (struct.isSetAppid()) {
          oprot.writeString(struct.appid);
        }
        if (struct.isSetOpenid()) {
          oprot.writeString(struct.openid);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, UserInfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.token = iprot.readString();
          struct.setTokenIsSet(true);
        }
        if (incoming.get(1)) {
          struct.appid = iprot.readString();
          struct.setAppidIsSet(true);
        }
        if (incoming.get(2)) {
          struct.openid = iprot.readString();
          struct.setOpenidIsSet(true);
        }
      }
    }

  }

  public static class UserInfo_result implements org.apache.thrift.TBase<UserInfo_result, UserInfo_result._Fields>, java.io.Serializable, Cloneable, Comparable<UserInfo_result>, android.os.Parcelable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("UserInfo_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new UserInfo_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new UserInfo_resultTupleSchemeFactory());
    }

    public String success; // required

    @Override
    public void writeToParcel(android.os.Parcel out, int flags) {
      out.writeString(success);
    }

    @Override
    public int describeContents() {
      return 0;
    }

    public UserInfo_result(android.os.Parcel in) {
      this.success= in.readString();
    }

    public static final android.os.Parcelable.Creator<UserInfo_result> CREATOR = new android.os.Parcelable.Creator<UserInfo_result>() {
      @Override
      public UserInfo_result[] newArray(int size) {
        return new UserInfo_result[size];
      }

      @Override
      public UserInfo_result createFromParcel(android.os.Parcel in) {
        return new UserInfo_result(in);
      }
    };

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(UserInfo_result.class, metaDataMap);
    }

    public UserInfo_result() {
    }

    public UserInfo_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public UserInfo_result(UserInfo_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public UserInfo_result deepCopy() {
      return new UserInfo_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public UserInfo_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof UserInfo_result)
        return this.equals((UserInfo_result)that);
      return false;
    }

    public boolean equals(UserInfo_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(UserInfo_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("UserInfo_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class UserInfo_resultStandardSchemeFactory implements SchemeFactory {
      public UserInfo_resultStandardScheme getScheme() {
        return new UserInfo_resultStandardScheme();
      }
    }

    private static class UserInfo_resultStandardScheme extends StandardScheme<UserInfo_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, UserInfo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, UserInfo_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class UserInfo_resultTupleSchemeFactory implements SchemeFactory {
      public UserInfo_resultTupleScheme getScheme() {
        return new UserInfo_resultTupleScheme();
      }
    }

    private static class UserInfo_resultTupleScheme extends TupleScheme<UserInfo_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, UserInfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, UserInfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
