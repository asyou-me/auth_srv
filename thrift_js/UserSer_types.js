//
// Autogenerated by Thrift Compiler (0.9.3)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


User = function(args) {
  this.id = null;
  this.username = null;
  this.email = null;
  this.name = null;
  this.timezone = null;
  this.created = null;
  this.updated = null;
  this.deleted = null;
  this.active = null;
  this.shardId = null;
  this.attributes = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field id is unset!');
    }
    if (args.username !== undefined && args.username !== null) {
      this.username = args.username;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field username is unset!');
    }
    if (args.email !== undefined && args.email !== null) {
      this.email = args.email;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field email is unset!');
    }
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field name is unset!');
    }
    if (args.timezone !== undefined && args.timezone !== null) {
      this.timezone = args.timezone;
    }
    if (args.created !== undefined && args.created !== null) {
      this.created = args.created;
    }
    if (args.updated !== undefined && args.updated !== null) {
      this.updated = args.updated;
    }
    if (args.deleted !== undefined && args.deleted !== null) {
      this.deleted = args.deleted;
    }
    if (args.active !== undefined && args.active !== null) {
      this.active = args.active;
    }
    if (args.shardId !== undefined && args.shardId !== null) {
      this.shardId = args.shardId;
    }
    if (args.attributes !== undefined && args.attributes !== null) {
      this.attributes = new UserAttributes(args.attributes);
    }
  }
};
User.prototype = {};
User.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.username = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.email = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.timezone = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.I64) {
        this.created = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.I64) {
        this.updated = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.I64) {
        this.deleted = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.BOOL) {
        this.active = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 14:
      if (ftype == Thrift.Type.STRING) {
        this.shardId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 15:
      if (ftype == Thrift.Type.STRUCT) {
        this.attributes = new UserAttributes();
        this.attributes.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

User.prototype.write = function(output) {
  output.writeStructBegin('User');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 1);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  if (this.username !== null && this.username !== undefined) {
    output.writeFieldBegin('username', Thrift.Type.STRING, 2);
    output.writeString(this.username);
    output.writeFieldEnd();
  }
  if (this.email !== null && this.email !== undefined) {
    output.writeFieldBegin('email', Thrift.Type.STRING, 3);
    output.writeString(this.email);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 4);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.timezone !== null && this.timezone !== undefined) {
    output.writeFieldBegin('timezone', Thrift.Type.STRING, 6);
    output.writeString(this.timezone);
    output.writeFieldEnd();
  }
  if (this.created !== null && this.created !== undefined) {
    output.writeFieldBegin('created', Thrift.Type.I64, 9);
    output.writeI64(this.created);
    output.writeFieldEnd();
  }
  if (this.updated !== null && this.updated !== undefined) {
    output.writeFieldBegin('updated', Thrift.Type.I64, 10);
    output.writeI64(this.updated);
    output.writeFieldEnd();
  }
  if (this.deleted !== null && this.deleted !== undefined) {
    output.writeFieldBegin('deleted', Thrift.Type.I64, 11);
    output.writeI64(this.deleted);
    output.writeFieldEnd();
  }
  if (this.active !== null && this.active !== undefined) {
    output.writeFieldBegin('active', Thrift.Type.BOOL, 13);
    output.writeBool(this.active);
    output.writeFieldEnd();
  }
  if (this.shardId !== null && this.shardId !== undefined) {
    output.writeFieldBegin('shardId', Thrift.Type.STRING, 14);
    output.writeString(this.shardId);
    output.writeFieldEnd();
  }
  if (this.attributes !== null && this.attributes !== undefined) {
    output.writeFieldBegin('attributes', Thrift.Type.STRUCT, 15);
    this.attributes.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

UserAttributes = function(args) {
  this.defaultLocationName = null;
  this.defaultLatitude = null;
  this.defaultLongitude = null;
  this.preactivation = null;
  this.viewedPromotions = null;
  this.incomingEmailAddress = null;
  this.recentMailedAddresses = null;
  this.comments = null;
  this.dateAgreedToTermsOfService = null;
  this.maxReferrals = null;
  this.referralCount = null;
  this.refererCode = null;
  this.sentEmailDate = null;
  this.sentEmailCount = null;
  this.dailyEmailLimit = null;
  this.emailOptOutDate = null;
  this.partnerEmailOptInDate = null;
  this.preferredLanguage = null;
  this.preferredCountry = null;
  this.clipFullPage = null;
  this.twitterUserName = null;
  this.twitterId = null;
  this.groupName = null;
  this.recognitionLanguage = null;
  this.referralProof = null;
  this.educationalDiscount = null;
  this.businessAddress = null;
  this.hideSponsorBilling = null;
  this.taxExempt = null;
  this.useEmailAutoFiling = null;
  this.reminderEmailConfig = null;
  if (args) {
    if (args.defaultLocationName !== undefined && args.defaultLocationName !== null) {
      this.defaultLocationName = args.defaultLocationName;
    }
    if (args.defaultLatitude !== undefined && args.defaultLatitude !== null) {
      this.defaultLatitude = args.defaultLatitude;
    }
    if (args.defaultLongitude !== undefined && args.defaultLongitude !== null) {
      this.defaultLongitude = args.defaultLongitude;
    }
    if (args.preactivation !== undefined && args.preactivation !== null) {
      this.preactivation = args.preactivation;
    }
    if (args.viewedPromotions !== undefined && args.viewedPromotions !== null) {
      this.viewedPromotions = Thrift.copyList(args.viewedPromotions, [null]);
    }
    if (args.incomingEmailAddress !== undefined && args.incomingEmailAddress !== null) {
      this.incomingEmailAddress = args.incomingEmailAddress;
    }
    if (args.recentMailedAddresses !== undefined && args.recentMailedAddresses !== null) {
      this.recentMailedAddresses = Thrift.copyList(args.recentMailedAddresses, [null]);
    }
    if (args.comments !== undefined && args.comments !== null) {
      this.comments = args.comments;
    }
    if (args.dateAgreedToTermsOfService !== undefined && args.dateAgreedToTermsOfService !== null) {
      this.dateAgreedToTermsOfService = args.dateAgreedToTermsOfService;
    }
    if (args.maxReferrals !== undefined && args.maxReferrals !== null) {
      this.maxReferrals = args.maxReferrals;
    }
    if (args.referralCount !== undefined && args.referralCount !== null) {
      this.referralCount = args.referralCount;
    }
    if (args.refererCode !== undefined && args.refererCode !== null) {
      this.refererCode = args.refererCode;
    }
    if (args.sentEmailDate !== undefined && args.sentEmailDate !== null) {
      this.sentEmailDate = args.sentEmailDate;
    }
    if (args.sentEmailCount !== undefined && args.sentEmailCount !== null) {
      this.sentEmailCount = args.sentEmailCount;
    }
    if (args.dailyEmailLimit !== undefined && args.dailyEmailLimit !== null) {
      this.dailyEmailLimit = args.dailyEmailLimit;
    }
    if (args.emailOptOutDate !== undefined && args.emailOptOutDate !== null) {
      this.emailOptOutDate = args.emailOptOutDate;
    }
    if (args.partnerEmailOptInDate !== undefined && args.partnerEmailOptInDate !== null) {
      this.partnerEmailOptInDate = args.partnerEmailOptInDate;
    }
    if (args.preferredLanguage !== undefined && args.preferredLanguage !== null) {
      this.preferredLanguage = args.preferredLanguage;
    }
    if (args.preferredCountry !== undefined && args.preferredCountry !== null) {
      this.preferredCountry = args.preferredCountry;
    }
    if (args.clipFullPage !== undefined && args.clipFullPage !== null) {
      this.clipFullPage = args.clipFullPage;
    }
    if (args.twitterUserName !== undefined && args.twitterUserName !== null) {
      this.twitterUserName = args.twitterUserName;
    }
    if (args.twitterId !== undefined && args.twitterId !== null) {
      this.twitterId = args.twitterId;
    }
    if (args.groupName !== undefined && args.groupName !== null) {
      this.groupName = args.groupName;
    }
    if (args.recognitionLanguage !== undefined && args.recognitionLanguage !== null) {
      this.recognitionLanguage = args.recognitionLanguage;
    }
    if (args.referralProof !== undefined && args.referralProof !== null) {
      this.referralProof = args.referralProof;
    }
    if (args.educationalDiscount !== undefined && args.educationalDiscount !== null) {
      this.educationalDiscount = args.educationalDiscount;
    }
    if (args.businessAddress !== undefined && args.businessAddress !== null) {
      this.businessAddress = args.businessAddress;
    }
    if (args.hideSponsorBilling !== undefined && args.hideSponsorBilling !== null) {
      this.hideSponsorBilling = args.hideSponsorBilling;
    }
    if (args.taxExempt !== undefined && args.taxExempt !== null) {
      this.taxExempt = args.taxExempt;
    }
    if (args.useEmailAutoFiling !== undefined && args.useEmailAutoFiling !== null) {
      this.useEmailAutoFiling = args.useEmailAutoFiling;
    }
    if (args.reminderEmailConfig !== undefined && args.reminderEmailConfig !== null) {
      this.reminderEmailConfig = args.reminderEmailConfig;
    }
  }
};
UserAttributes.prototype = {};
UserAttributes.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.defaultLocationName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.DOUBLE) {
        this.defaultLatitude = input.readDouble().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.DOUBLE) {
        this.defaultLongitude = input.readDouble().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.BOOL) {
        this.preactivation = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.LIST) {
        var _size0 = 0;
        var _rtmp34;
        this.viewedPromotions = [];
        var _etype3 = 0;
        _rtmp34 = input.readListBegin();
        _etype3 = _rtmp34.etype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var elem6 = null;
          elem6 = input.readString().value;
          this.viewedPromotions.push(elem6);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.incomingEmailAddress = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.LIST) {
        var _size7 = 0;
        var _rtmp311;
        this.recentMailedAddresses = [];
        var _etype10 = 0;
        _rtmp311 = input.readListBegin();
        _etype10 = _rtmp311.etype;
        _size7 = _rtmp311.size;
        for (var _i12 = 0; _i12 < _size7; ++_i12)
        {
          var elem13 = null;
          elem13 = input.readString().value;
          this.recentMailedAddresses.push(elem13);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.STRING) {
        this.comments = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.I64) {
        this.dateAgreedToTermsOfService = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.I32) {
        this.maxReferrals = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.I32) {
        this.referralCount = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 14:
      if (ftype == Thrift.Type.STRING) {
        this.refererCode = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 15:
      if (ftype == Thrift.Type.I64) {
        this.sentEmailDate = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 16:
      if (ftype == Thrift.Type.I32) {
        this.sentEmailCount = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 17:
      if (ftype == Thrift.Type.I32) {
        this.dailyEmailLimit = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 18:
      if (ftype == Thrift.Type.I64) {
        this.emailOptOutDate = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 19:
      if (ftype == Thrift.Type.I64) {
        this.partnerEmailOptInDate = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 20:
      if (ftype == Thrift.Type.STRING) {
        this.preferredLanguage = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 21:
      if (ftype == Thrift.Type.STRING) {
        this.preferredCountry = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 22:
      if (ftype == Thrift.Type.BOOL) {
        this.clipFullPage = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 23:
      if (ftype == Thrift.Type.STRING) {
        this.twitterUserName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 24:
      if (ftype == Thrift.Type.STRING) {
        this.twitterId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 25:
      if (ftype == Thrift.Type.STRING) {
        this.groupName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 26:
      if (ftype == Thrift.Type.STRING) {
        this.recognitionLanguage = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 28:
      if (ftype == Thrift.Type.STRING) {
        this.referralProof = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 29:
      if (ftype == Thrift.Type.BOOL) {
        this.educationalDiscount = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 30:
      if (ftype == Thrift.Type.STRING) {
        this.businessAddress = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 31:
      if (ftype == Thrift.Type.BOOL) {
        this.hideSponsorBilling = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 32:
      if (ftype == Thrift.Type.BOOL) {
        this.taxExempt = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 33:
      if (ftype == Thrift.Type.BOOL) {
        this.useEmailAutoFiling = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 34:
      if (ftype == Thrift.Type.I32) {
        this.reminderEmailConfig = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UserAttributes.prototype.write = function(output) {
  output.writeStructBegin('UserAttributes');
  if (this.defaultLocationName !== null && this.defaultLocationName !== undefined) {
    output.writeFieldBegin('defaultLocationName', Thrift.Type.STRING, 1);
    output.writeString(this.defaultLocationName);
    output.writeFieldEnd();
  }
  if (this.defaultLatitude !== null && this.defaultLatitude !== undefined) {
    output.writeFieldBegin('defaultLatitude', Thrift.Type.DOUBLE, 2);
    output.writeDouble(this.defaultLatitude);
    output.writeFieldEnd();
  }
  if (this.defaultLongitude !== null && this.defaultLongitude !== undefined) {
    output.writeFieldBegin('defaultLongitude', Thrift.Type.DOUBLE, 3);
    output.writeDouble(this.defaultLongitude);
    output.writeFieldEnd();
  }
  if (this.preactivation !== null && this.preactivation !== undefined) {
    output.writeFieldBegin('preactivation', Thrift.Type.BOOL, 4);
    output.writeBool(this.preactivation);
    output.writeFieldEnd();
  }
  if (this.viewedPromotions !== null && this.viewedPromotions !== undefined) {
    output.writeFieldBegin('viewedPromotions', Thrift.Type.LIST, 5);
    output.writeListBegin(Thrift.Type.STRING, this.viewedPromotions.length);
    for (var iter14 in this.viewedPromotions)
    {
      if (this.viewedPromotions.hasOwnProperty(iter14))
      {
        iter14 = this.viewedPromotions[iter14];
        output.writeString(iter14);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.incomingEmailAddress !== null && this.incomingEmailAddress !== undefined) {
    output.writeFieldBegin('incomingEmailAddress', Thrift.Type.STRING, 6);
    output.writeString(this.incomingEmailAddress);
    output.writeFieldEnd();
  }
  if (this.recentMailedAddresses !== null && this.recentMailedAddresses !== undefined) {
    output.writeFieldBegin('recentMailedAddresses', Thrift.Type.LIST, 7);
    output.writeListBegin(Thrift.Type.STRING, this.recentMailedAddresses.length);
    for (var iter15 in this.recentMailedAddresses)
    {
      if (this.recentMailedAddresses.hasOwnProperty(iter15))
      {
        iter15 = this.recentMailedAddresses[iter15];
        output.writeString(iter15);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.comments !== null && this.comments !== undefined) {
    output.writeFieldBegin('comments', Thrift.Type.STRING, 9);
    output.writeString(this.comments);
    output.writeFieldEnd();
  }
  if (this.dateAgreedToTermsOfService !== null && this.dateAgreedToTermsOfService !== undefined) {
    output.writeFieldBegin('dateAgreedToTermsOfService', Thrift.Type.I64, 11);
    output.writeI64(this.dateAgreedToTermsOfService);
    output.writeFieldEnd();
  }
  if (this.maxReferrals !== null && this.maxReferrals !== undefined) {
    output.writeFieldBegin('maxReferrals', Thrift.Type.I32, 12);
    output.writeI32(this.maxReferrals);
    output.writeFieldEnd();
  }
  if (this.referralCount !== null && this.referralCount !== undefined) {
    output.writeFieldBegin('referralCount', Thrift.Type.I32, 13);
    output.writeI32(this.referralCount);
    output.writeFieldEnd();
  }
  if (this.refererCode !== null && this.refererCode !== undefined) {
    output.writeFieldBegin('refererCode', Thrift.Type.STRING, 14);
    output.writeString(this.refererCode);
    output.writeFieldEnd();
  }
  if (this.sentEmailDate !== null && this.sentEmailDate !== undefined) {
    output.writeFieldBegin('sentEmailDate', Thrift.Type.I64, 15);
    output.writeI64(this.sentEmailDate);
    output.writeFieldEnd();
  }
  if (this.sentEmailCount !== null && this.sentEmailCount !== undefined) {
    output.writeFieldBegin('sentEmailCount', Thrift.Type.I32, 16);
    output.writeI32(this.sentEmailCount);
    output.writeFieldEnd();
  }
  if (this.dailyEmailLimit !== null && this.dailyEmailLimit !== undefined) {
    output.writeFieldBegin('dailyEmailLimit', Thrift.Type.I32, 17);
    output.writeI32(this.dailyEmailLimit);
    output.writeFieldEnd();
  }
  if (this.emailOptOutDate !== null && this.emailOptOutDate !== undefined) {
    output.writeFieldBegin('emailOptOutDate', Thrift.Type.I64, 18);
    output.writeI64(this.emailOptOutDate);
    output.writeFieldEnd();
  }
  if (this.partnerEmailOptInDate !== null && this.partnerEmailOptInDate !== undefined) {
    output.writeFieldBegin('partnerEmailOptInDate', Thrift.Type.I64, 19);
    output.writeI64(this.partnerEmailOptInDate);
    output.writeFieldEnd();
  }
  if (this.preferredLanguage !== null && this.preferredLanguage !== undefined) {
    output.writeFieldBegin('preferredLanguage', Thrift.Type.STRING, 20);
    output.writeString(this.preferredLanguage);
    output.writeFieldEnd();
  }
  if (this.preferredCountry !== null && this.preferredCountry !== undefined) {
    output.writeFieldBegin('preferredCountry', Thrift.Type.STRING, 21);
    output.writeString(this.preferredCountry);
    output.writeFieldEnd();
  }
  if (this.clipFullPage !== null && this.clipFullPage !== undefined) {
    output.writeFieldBegin('clipFullPage', Thrift.Type.BOOL, 22);
    output.writeBool(this.clipFullPage);
    output.writeFieldEnd();
  }
  if (this.twitterUserName !== null && this.twitterUserName !== undefined) {
    output.writeFieldBegin('twitterUserName', Thrift.Type.STRING, 23);
    output.writeString(this.twitterUserName);
    output.writeFieldEnd();
  }
  if (this.twitterId !== null && this.twitterId !== undefined) {
    output.writeFieldBegin('twitterId', Thrift.Type.STRING, 24);
    output.writeString(this.twitterId);
    output.writeFieldEnd();
  }
  if (this.groupName !== null && this.groupName !== undefined) {
    output.writeFieldBegin('groupName', Thrift.Type.STRING, 25);
    output.writeString(this.groupName);
    output.writeFieldEnd();
  }
  if (this.recognitionLanguage !== null && this.recognitionLanguage !== undefined) {
    output.writeFieldBegin('recognitionLanguage', Thrift.Type.STRING, 26);
    output.writeString(this.recognitionLanguage);
    output.writeFieldEnd();
  }
  if (this.referralProof !== null && this.referralProof !== undefined) {
    output.writeFieldBegin('referralProof', Thrift.Type.STRING, 28);
    output.writeString(this.referralProof);
    output.writeFieldEnd();
  }
  if (this.educationalDiscount !== null && this.educationalDiscount !== undefined) {
    output.writeFieldBegin('educationalDiscount', Thrift.Type.BOOL, 29);
    output.writeBool(this.educationalDiscount);
    output.writeFieldEnd();
  }
  if (this.businessAddress !== null && this.businessAddress !== undefined) {
    output.writeFieldBegin('businessAddress', Thrift.Type.STRING, 30);
    output.writeString(this.businessAddress);
    output.writeFieldEnd();
  }
  if (this.hideSponsorBilling !== null && this.hideSponsorBilling !== undefined) {
    output.writeFieldBegin('hideSponsorBilling', Thrift.Type.BOOL, 31);
    output.writeBool(this.hideSponsorBilling);
    output.writeFieldEnd();
  }
  if (this.taxExempt !== null && this.taxExempt !== undefined) {
    output.writeFieldBegin('taxExempt', Thrift.Type.BOOL, 32);
    output.writeBool(this.taxExempt);
    output.writeFieldEnd();
  }
  if (this.useEmailAutoFiling !== null && this.useEmailAutoFiling !== undefined) {
    output.writeFieldBegin('useEmailAutoFiling', Thrift.Type.BOOL, 33);
    output.writeBool(this.useEmailAutoFiling);
    output.writeFieldEnd();
  }
  if (this.reminderEmailConfig !== null && this.reminderEmailConfig !== undefined) {
    output.writeFieldBegin('reminderEmailConfig', Thrift.Type.I32, 34);
    output.writeI32(this.reminderEmailConfig);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

